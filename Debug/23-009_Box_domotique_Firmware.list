
23-009_Box_domotique_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004550  08004550  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000014  0800456c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800456c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba2d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eff  00000000  00000000  0002baac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078c  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d41  00000000  00000000  0002eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca80  00000000  00000000  0003f845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064c0c  00000000  00000000  0004c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002248  00000000  00000000  000b0ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044b4 	.word	0x080044b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080044b4 	.word	0x080044b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <CS_Select>:


extern SPI_HandleTypeDef hspi1;

void CS_Select (void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	0219      	lsls	r1, r3, #8
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2200      	movs	r2, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fa10 	bl	80018ec <HAL_GPIO_WritePin>
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	0219      	lsls	r1, r3, #8
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fa03 	bl	80018ec <HAL_GPIO_WritePin>
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <CE_Enable>:


void CE_Enable (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <CE_Enable+0x18>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	0019      	movs	r1, r3
 80004fa:	f001 f9f7 	bl	80018ec <HAL_GPIO_WritePin>
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	50000400 	.word	0x50000400

08000508 <CE_Disable>:

void CE_Disable (void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <CE_Disable+0x18>)
 8000512:	2200      	movs	r2, #0
 8000514:	0019      	movs	r1, r3
 8000516:	f001 f9e9 	bl	80018ec <HAL_GPIO_WritePin>
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	50000400 	.word	0x50000400

08000524 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	0002      	movs	r2, r0
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	1dbb      	adds	r3, r7, #6
 8000532:	1c0a      	adds	r2, r1, #0
 8000534:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2220      	movs	r2, #32
 800053c:	4313      	orrs	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	240c      	movs	r4, #12
 8000542:	193b      	adds	r3, r7, r4
 8000544:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	1dba      	adds	r2, r7, #6
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800054e:	f7ff ffb3 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 8000552:	23fa      	movs	r3, #250	; 0xfa
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	1939      	adds	r1, r7, r4
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <nrf24_WriteReg+0x48>)
 800055a:	2202      	movs	r2, #2
 800055c:	f002 f939 	bl	80027d2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000560:	f7ff ffb7 	bl	80004d2 <CS_UnSelect>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b005      	add	sp, #20
 800056a:	bd90      	pop	{r4, r7, pc}
 800056c:	20000030 	.word	0x20000030

08000570 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	210f      	movs	r1, #15
 800057c:	187b      	adds	r3, r7, r1
 800057e:	1c02      	adds	r2, r0, #0
 8000580:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2220      	movs	r2, #32
 8000588:	4313      	orrs	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	2414      	movs	r4, #20
 800058e:	193b      	adds	r3, r7, r4
 8000590:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000592:	f7ff ff91 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8000596:	1939      	adds	r1, r7, r4
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <nrf24_WriteRegMulti+0x50>)
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	2201      	movs	r2, #1
 800059e:	f002 f918 	bl	80027d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 1000);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	23fa      	movs	r3, #250	; 0xfa
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	68b9      	ldr	r1, [r7, #8]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <nrf24_WriteRegMulti+0x50>)
 80005ae:	f002 f910 	bl	80027d2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005b2:	f7ff ff8e 	bl	80004d2 <CS_UnSelect>
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b007      	add	sp, #28
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000030 	.word	0x20000030

080005c4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	0002      	movs	r2, r0
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 80005d0:	240f      	movs	r4, #15
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005d8:	f7ff ff6e 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 80005dc:	1df9      	adds	r1, r7, #7
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <nrf24_ReadReg+0x40>)
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	f002 f8f5 	bl	80027d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80005e8:	1939      	adds	r1, r7, r4
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <nrf24_ReadReg+0x40>)
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	2201      	movs	r2, #1
 80005f0:	f002 fa4c 	bl	8002a8c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005f4:	f7ff ff6d 	bl	80004d2 <CS_UnSelect>

	return data;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	781b      	ldrb	r3, [r3, #0]
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b005      	add	sp, #20
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	20000030 	.word	0x20000030

08000608 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	240f      	movs	r4, #15
 8000614:	193b      	adds	r3, r7, r4
 8000616:	1c02      	adds	r2, r0, #0
 8000618:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800061a:	f7ff ff4d 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 800061e:	1939      	adds	r1, r7, r4
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <nrf24_ReadReg_Multi+0x40>)
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	2201      	movs	r2, #1
 8000626:	f002 f8d4 	bl	80027d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, size, 1000);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	b29a      	uxth	r2, r3
 800062e:	23fa      	movs	r3, #250	; 0xfa
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <nrf24_ReadReg_Multi+0x40>)
 8000636:	f002 fa29 	bl	8002a8c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800063a:	f7ff ff4a 	bl	80004d2 <CS_UnSelect>
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b005      	add	sp, #20
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000030 	.word	0x20000030

0800064c <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	0002      	movs	r2, r0
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000658:	f7ff ff2e 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <nrfsendCmd+0x28>)
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	f002 f8b5 	bl	80027d2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000668:	f7ff ff33 	bl	80004d2 <CS_UnSelect>
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000030 	.word	0x20000030

08000678 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	0002      	movs	r2, r0
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b07      	cmp	r3, #7
 800068a:	d104      	bne.n	8000696 <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800068c:	2100      	movs	r1, #0
 800068e:	2007      	movs	r0, #7
 8000690:	f7ff ff48 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000694:	e08b      	b.n	80007ae <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b17      	cmp	r3, #23
 800069c:	d104      	bne.n	80006a8 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 800069e:	2111      	movs	r1, #17
 80006a0:	2017      	movs	r0, #23
 80006a2:	f7ff ff3f 	bl	8000524 <nrf24_WriteReg>
}
 80006a6:	e082      	b.n	80007ae <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80006a8:	2108      	movs	r1, #8
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ff3a 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80006b0:	213f      	movs	r1, #63	; 0x3f
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff36 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80006b8:	2103      	movs	r1, #3
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ff32 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80006c0:	2103      	movs	r1, #3
 80006c2:	2003      	movs	r0, #3
 80006c4:	f7ff ff2e 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80006c8:	2103      	movs	r1, #3
 80006ca:	2004      	movs	r0, #4
 80006cc:	f7ff ff2a 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80006d0:	2102      	movs	r1, #2
 80006d2:	2005      	movs	r0, #5
 80006d4:	f7ff ff26 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80006d8:	210e      	movs	r1, #14
 80006da:	2006      	movs	r0, #6
 80006dc:	f7ff ff22 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2007      	movs	r0, #7
 80006e4:	f7ff ff1e 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2008      	movs	r0, #8
 80006ec:	f7ff ff1a 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2009      	movs	r0, #9
 80006f4:	f7ff ff16 	bl	8000524 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006f8:	2018      	movs	r0, #24
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <nrf24_reset+0x140>)
 80006fe:	6811      	ldr	r1, [r2, #0]
 8000700:	6019      	str	r1, [r3, #0]
 8000702:	7912      	ldrb	r2, [r2, #4]
 8000704:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000706:	183b      	adds	r3, r7, r0
 8000708:	2205      	movs	r2, #5
 800070a:	0019      	movs	r1, r3
 800070c:	200a      	movs	r0, #10
 800070e:	f7ff ff2f 	bl	8000570 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000712:	2010      	movs	r0, #16
 8000714:	183b      	adds	r3, r7, r0
 8000716:	4a29      	ldr	r2, [pc, #164]	; (80007bc <nrf24_reset+0x144>)
 8000718:	6811      	ldr	r1, [r2, #0]
 800071a:	6019      	str	r1, [r3, #0]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000720:	183b      	adds	r3, r7, r0
 8000722:	2205      	movs	r2, #5
 8000724:	0019      	movs	r1, r3
 8000726:	200b      	movs	r0, #11
 8000728:	f7ff ff22 	bl	8000570 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800072c:	21c3      	movs	r1, #195	; 0xc3
 800072e:	200c      	movs	r0, #12
 8000730:	f7ff fef8 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000734:	21c4      	movs	r1, #196	; 0xc4
 8000736:	200d      	movs	r0, #13
 8000738:	f7ff fef4 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800073c:	21c5      	movs	r1, #197	; 0xc5
 800073e:	200e      	movs	r0, #14
 8000740:	f7ff fef0 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000744:	21c6      	movs	r1, #198	; 0xc6
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff feec 	bl	8000524 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800074c:	2008      	movs	r0, #8
 800074e:	183b      	adds	r3, r7, r0
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <nrf24_reset+0x140>)
 8000752:	6811      	ldr	r1, [r2, #0]
 8000754:	6019      	str	r1, [r3, #0]
 8000756:	7912      	ldrb	r2, [r2, #4]
 8000758:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800075a:	183b      	adds	r3, r7, r0
 800075c:	2205      	movs	r2, #5
 800075e:	0019      	movs	r1, r3
 8000760:	2010      	movs	r0, #16
 8000762:	f7ff ff05 	bl	8000570 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000766:	2100      	movs	r1, #0
 8000768:	2011      	movs	r0, #17
 800076a:	f7ff fedb 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800076e:	2100      	movs	r1, #0
 8000770:	2012      	movs	r0, #18
 8000772:	f7ff fed7 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000776:	2100      	movs	r1, #0
 8000778:	2013      	movs	r0, #19
 800077a:	f7ff fed3 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800077e:	2100      	movs	r1, #0
 8000780:	2014      	movs	r0, #20
 8000782:	f7ff fecf 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000786:	2100      	movs	r1, #0
 8000788:	2015      	movs	r0, #21
 800078a:	f7ff fecb 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800078e:	2100      	movs	r1, #0
 8000790:	2016      	movs	r0, #22
 8000792:	f7ff fec7 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000796:	2111      	movs	r1, #17
 8000798:	2017      	movs	r0, #23
 800079a:	f7ff fec3 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	201c      	movs	r0, #28
 80007a2:	f7ff febf 	bl	8000524 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	201d      	movs	r0, #29
 80007aa:	f7ff febb 	bl	8000524 <nrf24_WriteReg>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b008      	add	sp, #32
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	080044cc 	.word	0x080044cc
 80007bc:	080044d4 	.word	0x080044d4

080007c0 <NRF24_Init>:




void NRF24_Init (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80007c4:	f7ff fea0 	bl	8000508 <CE_Disable>
	CS_UnSelect();
 80007c8:	f7ff fe83 	bl	80004d2 <CS_UnSelect>


	// reset everything
	nrf24_reset (0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff53 	bl	8000678 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fea5 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80007da:	2100      	movs	r1, #0
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fea1 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80007e2:	2100      	movs	r1, #0
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff fe9d 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007ea:	2103      	movs	r1, #3
 80007ec:	2003      	movs	r0, #3
 80007ee:	f7ff fe99 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007f2:	2100      	movs	r1, #0
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff fe95 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007fa:	2100      	movs	r1, #0
 80007fc:	2005      	movs	r0, #5
 80007fe:	f7ff fe91 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000802:	210e      	movs	r1, #14
 8000804:	2006      	movs	r0, #6
 8000806:	f7ff fe8d 	bl	8000524 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800080a:	f7ff fe6f 	bl	80004ec <CE_Enable>
	CS_Select();
 800080e:	f7ff fe53 	bl	80004b8 <CS_Select>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	000a      	movs	r2, r1
 8000822:	1cfb      	adds	r3, r7, #3
 8000824:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	CE_Disable();
 8000826:	f7ff fe6f 	bl	8000508 <CE_Disable>

	nrf24_reset (STATUS);
 800082a:	2007      	movs	r0, #7
 800082c:	f7ff ff24 	bl	8000678 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000830:	1cfb      	adds	r3, r7, #3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	0019      	movs	r1, r3
 8000836:	2005      	movs	r0, #5
 8000838:	f7ff fe74 	bl	8000524 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800083c:	250f      	movs	r5, #15
 800083e:	197c      	adds	r4, r7, r5
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff febf 	bl	80005c4 <nrf24_ReadReg>
 8000846:	0003      	movs	r3, r0
 8000848:	7023      	strb	r3, [r4, #0]
	en_rxaddr = en_rxaddr | (1<<1);
 800084a:	0028      	movs	r0, r5
 800084c:	183b      	adds	r3, r7, r0
 800084e:	183a      	adds	r2, r7, r0
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	2102      	movs	r1, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000858:	183b      	adds	r3, r7, r0
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	0019      	movs	r1, r3
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fe60 	bl	8000524 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2205      	movs	r2, #5
 8000868:	0019      	movs	r1, r3
 800086a:	200b      	movs	r0, #11
 800086c:	f7ff fe80 	bl	8000570 <nrf24_WriteRegMulti>
	//nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

	nrf24_WriteReg (RX_PW_P1, 32);   // 32 bit payload size for pipe 2
 8000870:	2120      	movs	r1, #32
 8000872:	2012      	movs	r0, #18
 8000874:	f7ff fe56 	bl	8000524 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000878:	250e      	movs	r5, #14
 800087a:	197c      	adds	r4, r7, r5
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fea1 	bl	80005c4 <nrf24_ReadReg>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
	config = config | (1<<1) | (1<<0);
 8000886:	0028      	movs	r0, r5
 8000888:	183b      	adds	r3, r7, r0
 800088a:	183a      	adds	r2, r7, r0
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	2103      	movs	r1, #3
 8000890:	430a      	orrs	r2, r1
 8000892:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (CONFIG, config);
 8000894:	183b      	adds	r3, r7, r0
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0019      	movs	r1, r3
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fe42 	bl	8000524 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80008a0:	f7ff fe24 	bl	80004ec <CE_Enable>
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b004      	add	sp, #16
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}

080008ac <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80008b4:	250f      	movs	r5, #15
 80008b6:	197c      	adds	r4, r7, r5
 80008b8:	2007      	movs	r0, #7
 80008ba:	f7ff fe83 	bl	80005c4 <nrf24_ReadReg>
 80008be:	0003      	movs	r3, r0
 80008c0:	7023      	strb	r3, [r4, #0]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80008c2:	0029      	movs	r1, r5
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2240      	movs	r2, #64	; 0x40
 80008ca:	4013      	ands	r3, r2
 80008cc:	d00b      	beq.n	80008e6 <isDataAvailable+0x3a>
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	0052      	lsls	r2, r2, #1
 80008d6:	4013      	ands	r3, r2
 80008d8:	d005      	beq.n	80008e6 <isDataAvailable+0x3a>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	2007      	movs	r0, #7
 80008de:	f7ff fe21 	bl	8000524 <nrf24_WriteReg>

		return 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <isDataAvailable+0x3c>
	}

	return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b004      	add	sp, #16
 80008ee:	bdb0      	pop	{r4, r5, r7, pc}

080008f0 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80008f8:	240f      	movs	r4, #15
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	// select the device
	CS_Select();
 8000900:	f7ff fdda 	bl	80004b8 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2261      	movs	r2, #97	; 0x61
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 800090a:	1939      	adds	r1, r7, r4
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <NRF24_Receive+0x58>)
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	2201      	movs	r2, #1
 8000912:	f001 ff5e 	bl	80027d2 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(&hspi1, data, 32, 1000);
 8000916:	23fa      	movs	r3, #250	; 0xfa
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <NRF24_Receive+0x58>)
 800091e:	2220      	movs	r2, #32
 8000920:	f002 f8b4 	bl	8002a8c <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000924:	f7ff fdd5 	bl	80004d2 <CS_UnSelect>

	HAL_Delay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fbc1 	bl	80010b0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	22e2      	movs	r2, #226	; 0xe2
 8000932:	701a      	strb	r2, [r3, #0]
	nrfsendCmd(cmdtosend);
 8000934:	193b      	adds	r3, r7, r4
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fe87 	bl	800064c <nrfsendCmd>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b005      	add	sp, #20
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000030 	.word	0x20000030

0800094c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e00c      	b.n	8000974 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	18d4      	adds	r4, r2, r3
 8000964:	0008      	movs	r0, r1
 8000966:	f7ff fe2d 	bl	80005c4 <nrf24_ReadReg>
 800096a:	0003      	movs	r3, r0
 800096c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b09      	cmp	r3, #9
 8000978:	ddef      	ble.n	800095a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	330a      	adds	r3, #10
 800097e:	2205      	movs	r2, #5
 8000980:	0019      	movs	r1, r3
 8000982:	200a      	movs	r0, #10
 8000984:	f7ff fe40 	bl	8000608 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	330f      	adds	r3, #15
 800098c:	2205      	movs	r2, #5
 800098e:	0019      	movs	r1, r3
 8000990:	200b      	movs	r0, #11
 8000992:	f7ff fe39 	bl	8000608 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3314      	adds	r3, #20
 800099a:	001c      	movs	r4, r3
 800099c:	200c      	movs	r0, #12
 800099e:	f7ff fe11 	bl	80005c4 <nrf24_ReadReg>
 80009a2:	0003      	movs	r3, r0
 80009a4:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3315      	adds	r3, #21
 80009aa:	001c      	movs	r4, r3
 80009ac:	200d      	movs	r0, #13
 80009ae:	f7ff fe09 	bl	80005c4 <nrf24_ReadReg>
 80009b2:	0003      	movs	r3, r0
 80009b4:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3316      	adds	r3, #22
 80009ba:	001c      	movs	r4, r3
 80009bc:	200e      	movs	r0, #14
 80009be:	f7ff fe01 	bl	80005c4 <nrf24_ReadReg>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3317      	adds	r3, #23
 80009ca:	001c      	movs	r4, r3
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff fdf9 	bl	80005c4 <nrf24_ReadReg>
 80009d2:	0003      	movs	r3, r0
 80009d4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3318      	adds	r3, #24
 80009da:	2205      	movs	r2, #5
 80009dc:	0019      	movs	r1, r3
 80009de:	200a      	movs	r0, #10
 80009e0:	f7ff fe12 	bl	8000608 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80009e4:	231d      	movs	r3, #29
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	e00e      	b.n	8000a08 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	3b0c      	subs	r3, #12
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	18d4      	adds	r4, r2, r3
 80009f8:	0008      	movs	r0, r1
 80009fa:	f7ff fde3 	bl	80005c4 <nrf24_ReadReg>
 80009fe:	0003      	movs	r3, r0
 8000a00:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b25      	cmp	r3, #37	; 0x25
 8000a0c:	dded      	ble.n	80009ea <NRF24_ReadAll+0x9e>
	}

}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b005      	add	sp, #20
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fad8 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f832 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f922 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a28:	f000 f902 	bl	8000c30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f8d0 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a30:	f000 f896 	bl	8000b60 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000a34:	f7ff fec4 	bl	80007c0 <NRF24_Init>

#ifdef RX_MODE
  NRF24_RxMode(RxAddress, 10);
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <main+0x60>)
 8000a3a:	210a      	movs	r1, #10
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff feeb 	bl	8000818 <NRF24_RxMode>
#else
  NRF24_TxMode(TxAddress, 10);
#endif
  NRF24_ReadAll(data);
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <main+0x64>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff81 	bl	800094c <NRF24_ReadAll>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RX_MODE
	  if (isDataAvailable(1) == 1)
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff ff2e 	bl	80008ac <isDataAvailable>
 8000a50:	0003      	movs	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d1f9      	bne.n	8000a4a <main+0x32>
	  {
		  NRF24_Receive(RxData);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <main+0x68>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff49 	bl	80008f0 <NRF24_Receive>
		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <main+0x68>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fb51 	bl	8000108 <strlen>
 8000a66:	0003      	movs	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <main+0x68>)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <main+0x6c>)
 8000a72:	f002 fc97 	bl	80033a4 <HAL_UART_Transmit>
	  if (isDataAvailable(1) == 1)
 8000a76:	e7e8      	b.n	8000a4a <main+0x32>
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000178 	.word	0x20000178
 8000a80:	20000158 	.word	0x20000158
 8000a84:	20000088 	.word	0x20000088

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b099      	sub	sp, #100	; 0x64
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	242c      	movs	r4, #44	; 0x2c
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	0018      	movs	r0, r3
 8000a94:	2334      	movs	r3, #52	; 0x34
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f003 fcdf 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9e:	2318      	movs	r3, #24
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f003 fcd7 	bl	800445c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aae:	003b      	movs	r3, r7
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f003 fcd0 	bl	800445c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemClock_Config+0xd0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0109      	lsls	r1, r1, #4
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ace:	0021      	movs	r1, r4
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2201      	movs	r2, #1
 8000ada:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	22a0      	movs	r2, #160	; 0xa0
 8000ae6:	0212      	lsls	r2, r2, #8
 8000ae8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 ff18 	bl	8001928 <HAL_RCC_OscConfig>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000afc:	f000 f918 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	2118      	movs	r1, #24
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	220f      	movs	r2, #15
 8000b06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2100      	movs	r1, #0
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fa7b 	bl	8002020 <HAL_RCC_ClockConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b2e:	f000 f8ff 	bl	8000d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2202      	movs	r2, #2
 8000b36:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3e:	003b      	movs	r3, r7
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 fc91 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b4a:	f000 f8f1 	bl	8000d30 <Error_Handler>
  }
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b019      	add	sp, #100	; 0x64
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40007000 	.word	0x40007000
 8000b5c:	ffffe7ff 	.word	0xffffe7ff

08000b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <MX_SPI1_Init+0x6c>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b6c:	2282      	movs	r2, #130	; 0x82
 8000b6e:	0052      	lsls	r2, r2, #1
 8000b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MX_SPI1_Init+0x68>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fd84 	bl	80026c0 <HAL_SPI_Init>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bbc:	f000 f8b8 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000030 	.word	0x20000030
 8000bcc:	40013000 	.word	0x40013000

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART2_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	0252      	lsls	r2, r2, #9
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f002 fb71 	bl	80032fc <HAL_UART_Init>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f887 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000088 	.word	0x20000088
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	631a      	str	r2, [r3, #48]	; 0x30
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	200b      	movs	r0, #11
 8000c54:	f000 fafc 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000c58:	200b      	movs	r0, #11
 8000c5a:	f000 fb0e 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	240c      	movs	r4, #12
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	0018      	movs	r0, r3
 8000c78:	2314      	movs	r3, #20
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f003 fbed 	bl	800445c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_GPIO_Init+0xbc>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	2202      	movs	r2, #2
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	0219      	lsls	r1, r3, #8
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	2200      	movs	r2, #0
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fe15 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IRQ_Pin|CE_Pin, GPIO_PIN_RESET);
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <MX_GPIO_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	0019      	movs	r1, r3
 8000ccc:	f000 fe0e 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	0212      	lsls	r2, r2, #8
 8000cd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000cea:	193a      	adds	r2, r7, r4
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fc8c 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin CE_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin|CE_Pin;
 8000cf8:	0021      	movs	r1, r4
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	22c0      	movs	r2, #192	; 0xc0
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <MX_GPIO_Init+0xc0>)
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	f000 fc78 	bl	8001610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b009      	add	sp, #36	; 0x24
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	50000400 	.word	0x50000400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <HAL_MspInit+0x24>)
 8000d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x24>)
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_MspInit+0x24>)
 8000d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_MspInit+0x24>)
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	0549      	lsls	r1, r1, #21
 8000d56:	430a      	orrs	r2, r1
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	240c      	movs	r4, #12
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f003 fb70 	bl	800445c <memset>
  if(hspi->Instance==SPI1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_SPI_MspInit+0x7c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d128      	bne.n	8000dd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0149      	lsls	r1, r1, #5
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_SPI_MspInit+0x80>)
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2202      	movs	r2, #2
 8000da6:	4013      	ands	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dac:	0021      	movs	r1, r4
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2238      	movs	r2, #56	; 0x38
 8000db2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2202      	movs	r2, #2
 8000db8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_SPI_MspInit+0x84>)
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0010      	movs	r0, r2
 8000dd4:	f000 fc1c 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b009      	add	sp, #36	; 0x24
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	50000400 	.word	0x50000400

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	240c      	movs	r4, #12
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f003 fb2c 	bl	800445c <memset>
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d15b      	bne.n	8000ec6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0289      	lsls	r1, r1, #10
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	22c0      	movs	r2, #192	; 0xc0
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2204      	movs	r2, #4
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fbd6 	bl	8001610 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e66:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_UART_MspInit+0xf0>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e90:	2220      	movs	r2, #32
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fa09 	bl	80012b4 <HAL_DMA_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ea6:	f7ff ff43 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000eae:	675a      	str	r2, [r3, #116]	; 0x74
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 f9c8 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 f9da 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b009      	add	sp, #36	; 0x24
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	20000110 	.word	0x20000110
 8000edc:	40020058 	.word	0x40020058

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f8b8 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 facb 	bl	80014b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000110 	.word	0x20000110

08000f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <USART2_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fad8 	bl	80034e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	20000088 	.word	0x20000088

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <Reset_Handler>:
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <LoopForever+0x2>)
 8000f4e:	4685      	mov	sp, r0
 8000f50:	f7ff fff6 	bl	8000f40 <SystemInit>
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <LoopForever+0x6>)
 8000f56:	6801      	ldr	r1, [r0, #0]
 8000f58:	0e09      	lsrs	r1, r1, #24
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <LoopForever+0xa>)
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	d105      	bne.n	8000f6c <ApplicationStart>
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <LoopForever+0xe>)
 8000f62:	4912      	ldr	r1, [pc, #72]	; (8000fac <LoopForever+0x12>)
 8000f64:	6001      	str	r1, [r0, #0]
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <LoopForever+0x16>)
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <LoopForever+0x1a>)
 8000f6a:	6001      	str	r1, [r0, #0]

08000f6c <ApplicationStart>:
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <LoopForever+0x1e>)
 8000f6e:	4913      	ldr	r1, [pc, #76]	; (8000fbc <LoopForever+0x22>)
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <LoopForever+0x26>)
 8000f72:	2300      	movs	r3, #0
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:
 8000f76:	58d4      	ldr	r4, [r2, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:
 8000f7c:	18c4      	adds	r4, r0, r3
 8000f7e:	428c      	cmp	r4, r1
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <LoopForever+0x2a>)
 8000f84:	4c10      	ldr	r4, [pc, #64]	; (8000fc8 <LoopForever+0x2e>)
 8000f86:	2300      	movs	r3, #0
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:
 8000f8e:	42a2      	cmp	r2, r4
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>
 8000f92:	f003 fa6b 	bl	800446c <__libc_init_array>
 8000f96:	f7ff fd3f 	bl	8000a18 <main>

08000f9a <LoopForever>:
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
 8000f9c:	20002000 	.word	0x20002000
 8000fa0:	00000004 	.word	0x00000004
 8000fa4:	0000001f 	.word	0x0000001f
 8000fa8:	40021034 	.word	0x40021034
 8000fac:	00000001 	.word	0x00000001
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000014 	.word	0x20000014
 8000fc0:	08004558 	.word	0x08004558
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	200001b0 	.word	0x200001b0

08000fcc <ADC1_IRQHandler>:
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_Init+0x3c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Init+0x3c>)
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f811 	bl	8001010 <HAL_InitTick>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e001      	b.n	8000ffe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffa:	f7ff fe9f 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_InitTick+0x5c>)
 800101a:	681c      	ldr	r4, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	0019      	movs	r1, r3
 8001022:	23fa      	movs	r3, #250	; 0xfa
 8001024:	0098      	lsls	r0, r3, #2
 8001026:	f7ff f877 	bl	8000118 <__udivsi3>
 800102a:	0003      	movs	r3, r0
 800102c:	0019      	movs	r1, r3
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff f872 	bl	8000118 <__udivsi3>
 8001034:	0003      	movs	r3, r0
 8001036:	0018      	movs	r0, r3
 8001038:	f000 f92f 	bl	800129a <HAL_SYSTICK_Config>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00f      	b.n	8001064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80b      	bhi.n	8001062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8fc 	bl	8001250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_InitTick+0x64>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	20000008 	.word	0x20000008
 8001070:	20000010 	.word	0x20000010
 8001074:	2000000c 	.word	0x2000000c

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_IncTick+0x20>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000010 	.word	0x20000010
 8001098:	200001ac 	.word	0x200001ac

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	200001ac 	.word	0x200001ac

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fff0 	bl	800109c <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	001a      	movs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	f7ff ffe0 	bl	800109c <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	20000010 	.word	0x20000010

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d809      	bhi.n	8001120 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	231f      	movs	r3, #31
 8001114:	401a      	ands	r2, r3
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_EnableIRQ+0x30>)
 8001118:	2101      	movs	r1, #1
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
  }
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b7f      	cmp	r3, #127	; 0x7f
 8001140:	d828      	bhi.n	8001194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	589b      	ldr	r3, [r3, r2]
 8001152:	1dfa      	adds	r2, r7, #7
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	0011      	movs	r1, r2
 8001158:	2203      	movs	r2, #3
 800115a:	400a      	ands	r2, r1
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	401a      	ands	r2, r3
 8001168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	019b      	lsls	r3, r3, #6
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	401a      	ands	r2, r3
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	2303      	movs	r3, #3
 800117a:	4003      	ands	r3, r0
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	33c0      	adds	r3, #192	; 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001192:	e031      	b.n	80011f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0019      	movs	r1, r3
 800119c:	230f      	movs	r3, #15
 800119e:	400b      	ands	r3, r1
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3306      	adds	r3, #6
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <__NVIC_SetPriority+0xd8>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	001c      	movs	r4, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	4023      	ands	r3, r4
 80011e8:	3b08      	subs	r3, #8
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	3306      	adds	r3, #6
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	18c3      	adds	r3, r0, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	045b      	lsls	r3, r3, #17
 8001218:	429a      	cmp	r2, r3
 800121a:	d301      	bcc.n	8001220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121c:	2301      	movs	r3, #1
 800121e:	e010      	b.n	8001242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SysTick_Config+0x44>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3a01      	subs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff7c 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x44>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	210f      	movs	r1, #15
 800125c:	187b      	adds	r3, r7, r1
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	187b      	adds	r3, r7, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	0002      	movs	r2, r0
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ffaf 	bl	8001208 <SysTick_Config>
 80012aa:	0003      	movs	r3, r0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e061      	b.n	800138a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_DMA_Init+0xe0>)
 80012cc:	4694      	mov	ip, r2
 80012ce:	4463      	add	r3, ip
 80012d0:	2114      	movs	r1, #20
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff20 	bl	8000118 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	009a      	lsls	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_DMA_Init+0xe4>)
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2225      	movs	r2, #37	; 0x25
 80012ea:	2102      	movs	r1, #2
 80012ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_DMA_Init+0xe8>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	429a      	cmp	r2, r3
 800133e:	d018      	beq.n	8001372 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_DMA_Init+0xec>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	211c      	movs	r1, #28
 800134a:	400b      	ands	r3, r1
 800134c:	210f      	movs	r1, #15
 800134e:	4099      	lsls	r1, r3
 8001350:	000b      	movs	r3, r1
 8001352:	43d9      	mvns	r1, r3
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_DMA_Init+0xec>)
 8001356:	400a      	ands	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_DMA_Init+0xec>)
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	201c      	movs	r0, #28
 8001368:	4003      	ands	r3, r0
 800136a:	409a      	lsls	r2, r3
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_DMA_Init+0xec>)
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2225      	movs	r2, #37	; 0x25
 800137c:	2101      	movs	r1, #1
 800137e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	bffdfff8 	.word	0xbffdfff8
 8001398:	40020000 	.word	0x40020000
 800139c:	ffff800f 	.word	0xffff800f
 80013a0:	400200a8 	.word	0x400200a8

080013a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2225      	movs	r2, #37	; 0x25
 80013b8:	5c9b      	ldrb	r3, [r3, r2]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2224      	movs	r2, #36	; 0x24
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e024      	b.n	800141c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	210e      	movs	r1, #14
 80013de:	438a      	bics	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	438a      	bics	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	221c      	movs	r2, #28
 80013f8:	401a      	ands	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2101      	movs	r1, #1
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2225      	movs	r2, #37	; 0x25
 800140a:	2101      	movs	r1, #1
 800140c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2224      	movs	r2, #36	; 0x24
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]

    return status;
 8001416:	230f      	movs	r3, #15
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142c:	210f      	movs	r1, #15
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2225      	movs	r2, #37	; 0x25
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d006      	beq.n	800144e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e02a      	b.n	80014a4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	210e      	movs	r1, #14
 800145a:	438a      	bics	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	438a      	bics	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	221c      	movs	r2, #28
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	4091      	lsls	r1, r2
 800147e:	000a      	movs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2225      	movs	r2, #37	; 0x25
 8001486:	2101      	movs	r1, #1
 8001488:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2224      	movs	r2, #36	; 0x24
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	0010      	movs	r0, r2
 80014a2:	4798      	blx	r3
    }
  }
  return status;
 80014a4:	230f      	movs	r3, #15
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	781b      	ldrb	r3, [r3, #0]
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	221c      	movs	r2, #28
 80014d0:	4013      	ands	r3, r2
 80014d2:	2204      	movs	r2, #4
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	d026      	beq.n	800152c <HAL_DMA_IRQHandler+0x7a>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	d022      	beq.n	800152c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2220      	movs	r2, #32
 80014ee:	4013      	ands	r3, r2
 80014f0:	d107      	bne.n	8001502 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2104      	movs	r1, #4
 80014fe:	438a      	bics	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	221c      	movs	r2, #28
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2104      	movs	r1, #4
 8001510:	4091      	lsls	r1, r2
 8001512:	000a      	movs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <HAL_DMA_IRQHandler+0x6e>
 800151e:	e071      	b.n	8001604 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	0010      	movs	r0, r2
 8001528:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800152a:	e06b      	b.n	8001604 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	221c      	movs	r2, #28
 8001532:	4013      	ands	r3, r2
 8001534:	2202      	movs	r2, #2
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	d02d      	beq.n	800159c <HAL_DMA_IRQHandler+0xea>
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d029      	beq.n	800159c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2220      	movs	r2, #32
 8001550:	4013      	ands	r3, r2
 8001552:	d10b      	bne.n	800156c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	210a      	movs	r1, #10
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2225      	movs	r2, #37	; 0x25
 8001568:	2101      	movs	r1, #1
 800156a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	221c      	movs	r2, #28
 8001572:	401a      	ands	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2102      	movs	r1, #2
 800157a:	4091      	lsls	r1, r2
 800157c:	000a      	movs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d039      	beq.n	8001604 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	0010      	movs	r0, r2
 8001598:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800159a:	e033      	b.n	8001604 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	221c      	movs	r2, #28
 80015a2:	4013      	ands	r3, r2
 80015a4:	2208      	movs	r2, #8
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	d02a      	beq.n	8001606 <HAL_DMA_IRQHandler+0x154>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2208      	movs	r2, #8
 80015b4:	4013      	ands	r3, r2
 80015b6:	d026      	beq.n	8001606 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	210e      	movs	r1, #14
 80015c4:	438a      	bics	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	221c      	movs	r2, #28
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2101      	movs	r1, #1
 80015d6:	4091      	lsls	r1, r2
 80015d8:	000a      	movs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2225      	movs	r2, #37	; 0x25
 80015e6:	2101      	movs	r1, #1
 80015e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	0010      	movs	r0, r2
 8001602:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46c0      	nop			; (mov r8, r8)
}
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001626:	e149      	b.n	80018bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4091      	lsls	r1, r2
 8001632:	000a      	movs	r2, r1
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d100      	bne.n	8001640 <HAL_GPIO_Init+0x30>
 800163e:	e13a      	b.n	80018b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	4013      	ands	r3, r2
 8001648:	2b01      	cmp	r3, #1
 800164a:	d005      	beq.n	8001658 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2203      	movs	r2, #3
 8001652:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001654:	2b02      	cmp	r3, #2
 8001656:	d130      	bne.n	80016ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	43da      	mvns	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800168e:	2201      	movs	r2, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	2201      	movs	r2, #1
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d017      	beq.n	80016f6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d123      	bne.n	800174a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	58d3      	ldr	r3, [r2, r3]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2207      	movs	r2, #7
 8001714:	4013      	ands	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2107      	movs	r1, #7
 800172e:	400b      	ands	r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	6939      	ldr	r1, [r7, #16]
 8001748:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	43da      	mvns	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	401a      	ands	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d100      	bne.n	800178c <HAL_GPIO_Init+0x17c>
 800178a:	e094      	b.n	80018b6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 800178e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 8001792:	2101      	movs	r1, #1
 8001794:	430a      	orrs	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	589b      	ldr	r3, [r3, r2]
 80017a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	409a      	lsls	r2, r3
 80017b2:	0013      	movs	r3, r2
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x1de>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <HAL_GPIO_Init+0x2cc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x1da>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a43      	ldr	r2, [pc, #268]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x1d6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a42      	ldr	r2, [pc, #264]	; (80018e4 <HAL_GPIO_Init+0x2d4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x1d2>
 80017de:	2305      	movs	r3, #5
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017e2:	2306      	movs	r3, #6
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017ee:	2300      	movs	r3, #0
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	2103      	movs	r1, #3
 80017f4:	400a      	ands	r2, r1
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001800:	4935      	ldr	r1, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43da      	mvns	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	035b      	lsls	r3, r3, #13
 8001826:	4013      	ands	r3, r2
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43da      	mvns	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	039b      	lsls	r3, r3, #14
 8001850:	4013      	ands	r3, r2
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43da      	mvns	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	025b      	lsls	r3, r3, #9
 80018a4:	4013      	ands	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	1e13      	subs	r3, r2, #0
 80018c6:	d000      	beq.n	80018ca <HAL_GPIO_Init+0x2ba>
 80018c8:	e6ae      	b.n	8001628 <HAL_GPIO_Init+0x18>
  }
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b006      	add	sp, #24
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	50000400 	.word	0x50000400
 80018e0:	50000800 	.word	0x50000800
 80018e4:	50001c00 	.word	0x50001c00
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	0008      	movs	r0, r1
 80018f6:	0011      	movs	r1, r2
 80018f8:	1cbb      	adds	r3, r7, #2
 80018fa:	1c02      	adds	r2, r0, #0
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	1c7b      	adds	r3, r7, #1
 8001900:	1c0a      	adds	r2, r1, #0
 8001902:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	1c7b      	adds	r3, r7, #1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190c:	1cbb      	adds	r3, r7, #2
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	f000 fb6c 	bl	8002014 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193c:	4bc8      	ldr	r3, [pc, #800]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	220c      	movs	r2, #12
 8001942:	4013      	ands	r3, r2
 8001944:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001946:	4bc6      	ldr	r3, [pc, #792]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x36>
 800195c:	e07d      	b.n	8001a5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d007      	beq.n	8001974 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x68>
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	429a      	cmp	r2, r3
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	4bba      	ldr	r3, [pc, #744]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x5a>
 8001980:	e06a      	b.n	8001a58 <HAL_RCC_OscConfig+0x130>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d166      	bne.n	8001a58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f000 fb42 	bl	8002014 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	025b      	lsls	r3, r3, #9
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x84>
 800199c:	4bb0      	ldr	r3, [pc, #704]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4baf      	ldr	r3, [pc, #700]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0249      	lsls	r1, r1, #9
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e027      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	23a0      	movs	r3, #160	; 0xa0
 80019b2:	02db      	lsls	r3, r3, #11
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d10e      	bne.n	80019d6 <HAL_RCC_OscConfig+0xae>
 80019b8:	4ba9      	ldr	r3, [pc, #676]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4ba8      	ldr	r3, [pc, #672]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	02c9      	lsls	r1, r1, #11
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4ba6      	ldr	r3, [pc, #664]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4ba5      	ldr	r3, [pc, #660]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0249      	lsls	r1, r1, #9
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e012      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019d6:	4ba2      	ldr	r3, [pc, #648]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4ba1      	ldr	r3, [pc, #644]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019dc:	49a1      	ldr	r1, [pc, #644]	; (8001c64 <HAL_RCC_OscConfig+0x33c>)
 80019de:	400a      	ands	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4b9f      	ldr	r3, [pc, #636]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4b9b      	ldr	r3, [pc, #620]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b9a      	ldr	r3, [pc, #616]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 80019f6:	499c      	ldr	r1, [pc, #624]	; (8001c68 <HAL_RCC_OscConfig+0x340>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb4a 	bl	800109c <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fb45 	bl	800109c <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e2f9      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0xe6>
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb35 	bl	800109c <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb30 	bl	800109c <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e2e4      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a4a:	4b85      	ldr	r3, [pc, #532]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x110>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d100      	bne.n	8001a66 <HAL_RCC_OscConfig+0x13e>
 8001a64:	e099      	b.n	8001b9a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	2220      	movs	r2, #32
 8001a70:	4013      	ands	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a74:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	2220      	movs	r2, #32
 8001a84:	4393      	bics	r3, r2
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d13e      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1ea>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d13b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a9a:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_RCC_OscConfig+0x186>
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e2b2      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x344>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	021a      	lsls	r2, r3, #8
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2209      	movs	r2, #9
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 fbeb 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8001ada:	0001      	movs	r1, r0
 8001adc:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	4a62      	ldr	r2, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x348>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	000a      	movs	r2, r1
 8001aec:	40da      	lsrs	r2, r3
 8001aee:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_RCC_OscConfig+0x34c>)
 8001af0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x350>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2513      	movs	r5, #19
 8001af8:	197c      	adds	r4, r7, r5
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fa88 	bl	8001010 <HAL_InitTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b04:	197b      	adds	r3, r7, r5
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d046      	beq.n	8001b9a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001b0c:	197b      	adds	r3, r7, r5
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	e280      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d027      	beq.n	8001b68 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b18:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2209      	movs	r2, #9
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fab7 	bl	800109c <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fab2 	bl	800109c <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e266      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d0f1      	beq.n	8001b34 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_RCC_OscConfig+0x344>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	021a      	lsls	r2, r3, #8
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	438a      	bics	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fa92 	bl	800109c <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fa8d 	bl	800109c <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e241      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f1      	bne.n	8001b7e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x27e>
 8001ba4:	e0a1      	b.n	8001cea <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d140      	bne.n	8001c2e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x29c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e227      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_RCC_OscConfig+0x354>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1a      	ldr	r2, [r3, #32]
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	0a19      	lsrs	r1, r3, #8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	061a      	lsls	r2, r3, #24
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	0b5b      	lsrs	r3, r3, #13
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	0212      	lsls	r2, r2, #8
 8001bf8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	210f      	movs	r1, #15
 8001c02:	400b      	ands	r3, r1
 8001c04:	491a      	ldr	r1, [pc, #104]	; (8001c70 <HAL_RCC_OscConfig+0x348>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x34c>)
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_OscConfig+0x350>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2513      	movs	r5, #19
 8001c14:	197c      	adds	r4, r7, r5
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff f9fa 	bl	8001010 <HAL_InitTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d060      	beq.n	8001cea <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001c28:	197b      	adds	r3, r7, r5
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	e1f2      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03f      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_OscConfig+0x338>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0049      	lsls	r1, r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fa2a 	bl	800109c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fa25 	bl	800109c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d911      	bls.n	8001c80 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1d9      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	fffeffff 	.word	0xfffeffff
 8001c68:	fffbffff 	.word	0xfffbffff
 8001c6c:	ffffe0ff 	.word	0xffffe0ff
 8001c70:	080044dc 	.word	0x080044dc
 8001c74:	20000008 	.word	0x20000008
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c80:	4bc9      	ldr	r3, [pc, #804]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0e0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8c:	4bc6      	ldr	r3, [pc, #792]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4ac6      	ldr	r2, [pc, #792]	; (8001fac <HAL_RCC_OscConfig+0x684>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4bc3      	ldr	r3, [pc, #780]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca0:	4bc1      	ldr	r3, [pc, #772]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	0a19      	lsrs	r1, r3, #8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	061a      	lsls	r2, r3, #24
 8001cae:	4bbe      	ldr	r3, [pc, #760]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	e019      	b.n	8001cea <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cb6:	4bbc      	ldr	r3, [pc, #752]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4bbb      	ldr	r3, [pc, #748]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001cbc:	49bc      	ldr	r1, [pc, #752]	; (8001fb0 <HAL_RCC_OscConfig+0x688>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f9eb 	bl	800109c <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f9e6 	bl	800109c <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e19a      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cde:	4bb2      	ldr	r3, [pc, #712]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d036      	beq.n	8001d62 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d019      	beq.n	8001d30 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfc:	4baa      	ldr	r3, [pc, #680]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d00:	4ba9      	ldr	r3, [pc, #676]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff f9c8 	bl	800109c <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff f9c3 	bl	800109c <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e177      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d24:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d0f1      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3ea>
 8001d2e:	e018      	b.n	8001d62 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d34:	4b9c      	ldr	r3, [pc, #624]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	438a      	bics	r2, r1
 8001d3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f9ae 	bl	800109c <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff f9a9 	bl	800109c <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e15d      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f1      	bne.n	8001d46 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_OscConfig+0x446>
 8001d6c:	e0ae      	b.n	8001ecc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2023      	movs	r0, #35	; 0x23
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d90:	183b      	adds	r3, r7, r0
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x68c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d11a      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x68c>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x68c>)
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0049      	lsls	r1, r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db0:	f7ff f974 	bl	800109c <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff f96f 	bl	800109c <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e123      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <HAL_RCC_OscConfig+0x68c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4cc>
 8001de4:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de8:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0049      	lsls	r1, r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	651a      	str	r2, [r3, #80]	; 0x50
 8001df2:	e031      	b.n	8001e58 <HAL_RCC_OscConfig+0x530>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4ee>
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e00:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e02:	496b      	ldr	r1, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x688>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50
 8001e08:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0c:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e0e:	496a      	ldr	r1, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x690>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	651a      	str	r2, [r3, #80]	; 0x50
 8001e14:	e020      	b.n	8001e58 <HAL_RCC_OscConfig+0x530>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	23a0      	movs	r3, #160	; 0xa0
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d10e      	bne.n	8001e40 <HAL_RCC_OscConfig+0x518>
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	00c9      	lsls	r1, r1, #3
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e30:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0049      	lsls	r1, r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x530>
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e46:	495a      	ldr	r1, [pc, #360]	; (8001fb0 <HAL_RCC_OscConfig+0x688>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e4c:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e52:	4959      	ldr	r1, [pc, #356]	; (8001fb8 <HAL_RCC_OscConfig+0x690>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff f91c 	bl	800109c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff f917 	bl	800109c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_RCC_OscConfig+0x694>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0ca      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0ef      	beq.n	8001e6a <HAL_RCC_OscConfig+0x542>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f906 	bl	800109c <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e94:	e009      	b.n	8001eaa <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff f901 	bl	800109c <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4a46      	ldr	r2, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x694>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0b4      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb6:	2323      	movs	r3, #35	; 0x23
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001ec6:	493e      	ldr	r1, [pc, #248]	; (8001fc0 <HAL_RCC_OscConfig+0x698>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5ae>
 8001ed4:	e09d      	b.n	8002012 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d100      	bne.n	8001ede <HAL_RCC_OscConfig+0x5b6>
 8001edc:	e076      	b.n	8001fcc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d145      	bne.n	8001f72 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_RCC_OscConfig+0x69c>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f8d3 	bl	800109c <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f8ce 	bl	800109c <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e082      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	049b      	lsls	r3, r3, #18
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x6a0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	431a      	orrs	r2, r3
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0449      	lsls	r1, r1, #17
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f8a8 	bl	800109c <HAL_GetTick>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff f8a3 	bl	800109c <HAL_GetTick>
 8001f56:	0002      	movs	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e057      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	049b      	lsls	r3, r3, #18
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x62a>
 8001f70:	e04f      	b.n	8002012 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f78:	4912      	ldr	r1, [pc, #72]	; (8001fc4 <HAL_RCC_OscConfig+0x69c>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f88d 	bl	800109c <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff f888 	bl	800109c <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e03c      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_OscConfig+0x680>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	049b      	lsls	r3, r3, #18
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x660>
 8001fa6:	e034      	b.n	8002012 <HAL_RCC_OscConfig+0x6ea>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	ffff1fff 	.word	0xffff1fff
 8001fb0:	fffffeff 	.word	0xfffffeff
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	fffffbff 	.word	0xfffffbff
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff
 8001fc4:	feffffff 	.word	0xfeffffff
 8001fc8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x6f4>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d10f      	bne.n	800200e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	23f0      	movs	r3, #240	; 0xf0
 8001ff2:	039b      	lsls	r3, r3, #14
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	23c0      	movs	r3, #192	; 0xc0
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b00a      	add	sp, #40	; 0x28
 800201a:	bdb0      	pop	{r4, r5, r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e128      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b96      	ldr	r3, [pc, #600]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d91e      	bls.n	8002080 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b93      	ldr	r3, [pc, #588]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	4393      	bics	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	4b90      	ldr	r3, [pc, #576]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002054:	f7ff f822 	bl	800109c <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205c:	e009      	b.n	8002072 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7ff f81d 	bl	800109c <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e109      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d009      	beq.n	800209e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	22f0      	movs	r2, #240	; 0xf0
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_ClockConfig+0x8a>
 80020a8:	e089      	b.n	80021be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b2:	4b79      	ldr	r3, [pc, #484]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	4013      	ands	r3, r2
 80020bc:	d120      	bne.n	8002100 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e1      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	049b      	lsls	r3, r3, #18
 80020d2:	4013      	ands	r3, r2
 80020d4:	d114      	bne.n	8002100 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0d5      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e2:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0ca      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020f0:	4b69      	ldr	r3, [pc, #420]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0c2      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2203      	movs	r2, #3
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4b62      	ldr	r3, [pc, #392]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7fe ffc2 	bl	800109c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d111      	bne.n	8002148 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	e009      	b.n	800213a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7fe ffb9 	bl	800109c <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0a5      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	220c      	movs	r2, #12
 8002140:	4013      	ands	r3, r2
 8002142:	2b08      	cmp	r3, #8
 8002144:	d1ef      	bne.n	8002126 <HAL_RCC_ClockConfig+0x106>
 8002146:	e03a      	b.n	80021be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d111      	bne.n	8002174 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	e009      	b.n	8002166 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7fe ffa3 	bl	800109c <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e08f      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	220c      	movs	r2, #12
 800216c:	4013      	ands	r3, r2
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d1ef      	bne.n	8002152 <HAL_RCC_ClockConfig+0x132>
 8002172:	e024      	b.n	80021be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d11b      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217c:	e009      	b.n	8002192 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe ff8d 	bl	800109c <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a42      	ldr	r2, [pc, #264]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e079      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	220c      	movs	r2, #12
 8002198:	4013      	ands	r3, r2
 800219a:	2b04      	cmp	r3, #4
 800219c:	d1ef      	bne.n	800217e <HAL_RCC_ClockConfig+0x15e>
 800219e:	e00e      	b.n	80021be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe ff7c 	bl	800109c <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e068      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	220c      	movs	r2, #12
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d21e      	bcs.n	800220a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4393      	bics	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021de:	f7fe ff5d 	bl	800109c <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe ff58 	bl	800109c <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_RCC_ClockConfig+0x274>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e044      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x27c>)
 800221a:	4013      	ands	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2208      	movs	r2, #8
 800222e:	4013      	ands	r3, r2
 8002230:	d00a      	beq.n	8002248 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_RCC_ClockConfig+0x280>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00da      	lsls	r2, r3, #3
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002248:	f000 f832 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800224c:	0001      	movs	r1, r0
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	220f      	movs	r2, #15
 8002256:	4013      	ands	r3, r2
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_RCC_ClockConfig+0x284>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	000a      	movs	r2, r1
 800225e:	40da      	lsrs	r2, r3
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_ClockConfig+0x288>)
 8002262:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_ClockConfig+0x28c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	250b      	movs	r5, #11
 800226a:	197c      	adds	r4, r7, r5
 800226c:	0018      	movs	r0, r3
 800226e:	f7fe fecf 	bl	8001010 <HAL_InitTick>
 8002272:	0003      	movs	r3, r0
 8002274:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002276:	197b      	adds	r3, r7, r5
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800227e:	197b      	adds	r3, r7, r5
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	e000      	b.n	8002286 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b004      	add	sp, #16
 800228c:	bdb0      	pop	{r4, r5, r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40022000 	.word	0x40022000
 8002294:	00001388 	.word	0x00001388
 8002298:	40021000 	.word	0x40021000
 800229c:	fffff8ff 	.word	0xfffff8ff
 80022a0:	ffffc7ff 	.word	0xffffc7ff
 80022a4:	080044dc 	.word	0x080044dc
 80022a8:	20000008 	.word	0x20000008
 80022ac:	2000000c 	.word	0x2000000c

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b08e      	sub	sp, #56	; 0x38
 80022b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022be:	230c      	movs	r3, #12
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d014      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022c6:	d900      	bls.n	80022ca <HAL_RCC_GetSysClockFreq+0x1a>
 80022c8:	e07b      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x112>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x24>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x3a>
 80022d2:	e076      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022d4:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2210      	movs	r2, #16
 80022da:	4013      	ands	r3, r2
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022e2:	e07c      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022e8:	e079      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ee:	e076      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	0c9a      	lsrs	r2, r3, #18
 80022f4:	230f      	movs	r3, #15
 80022f6:	401a      	ands	r2, r3
 80022f8:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80022fa:	5c9b      	ldrb	r3, [r3, r2]
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	0d9a      	lsrs	r2, r3, #22
 8002302:	2303      	movs	r3, #3
 8002304:	4013      	ands	r3, r2
 8002306:	3301      	adds	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	4013      	ands	r3, r2
 8002314:	d01a      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002320:	2300      	movs	r3, #0
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	69f9      	ldr	r1, [r7, #28]
 8002326:	f7fd ffa3 	bl	8000270 <__aeabi_lmul>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0010      	movs	r0, r2
 8002330:	0019      	movs	r1, r3
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f7fd ff77 	bl	8000230 <__aeabi_uldivmod>
 8002342:	0002      	movs	r2, r0
 8002344:	000b      	movs	r3, r1
 8002346:	0013      	movs	r3, r2
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
 800234a:	e037      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	4013      	ands	r3, r2
 8002354:	d01a      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002360:	2300      	movs	r3, #0
 8002362:	68b8      	ldr	r0, [r7, #8]
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	f7fd ff83 	bl	8000270 <__aeabi_lmul>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0010      	movs	r0, r2
 8002370:	0019      	movs	r1, r3
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f7fd ff57 	bl	8000230 <__aeabi_uldivmod>
 8002382:	0002      	movs	r2, r0
 8002384:	000b      	movs	r3, r1
 8002386:	0013      	movs	r3, r2
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
 800238a:	e017      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	0018      	movs	r0, r3
 8002390:	2300      	movs	r3, #0
 8002392:	0019      	movs	r1, r3
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002396:	2300      	movs	r3, #0
 8002398:	f7fd ff6a 	bl	8000270 <__aeabi_lmul>
 800239c:	0002      	movs	r2, r0
 800239e:	000b      	movs	r3, r1
 80023a0:	0010      	movs	r0, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	001c      	movs	r4, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	001d      	movs	r5, r3
 80023ac:	0022      	movs	r2, r4
 80023ae:	002b      	movs	r3, r5
 80023b0:	f7fd ff3e 	bl	8000230 <__aeabi_uldivmod>
 80023b4:	0002      	movs	r2, r0
 80023b6:	000b      	movs	r3, r1
 80023b8:	0013      	movs	r3, r2
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023c0:	e00d      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	2207      	movs	r2, #7
 80023ca:	4013      	ands	r3, r2
 80023cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	3301      	adds	r3, #1
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	0212      	lsls	r2, r2, #8
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b00e      	add	sp, #56	; 0x38
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	003d0900 	.word	0x003d0900
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	080044f4 	.word	0x080044f4

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_RCC_GetHCLKFreq+0x10>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff2 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002418:	0001      	movs	r1, r0
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	2207      	movs	r2, #7
 8002422:	4013      	ands	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	40d9      	lsrs	r1, r3
 800242a:	000b      	movs	r3, r1
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	080044ec 	.word	0x080044ec

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffdc 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002444:	0001      	movs	r1, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	40d9      	lsrs	r1, r3
 8002456:	000b      	movs	r3, r1
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40021000 	.word	0x40021000
 8002464:	080044ec 	.word	0x080044ec

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002470:	2017      	movs	r0, #23
 8002472:	183b      	adds	r3, r7, r0
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2220      	movs	r2, #32
 800247e:	4013      	ands	r3, r2
 8002480:	d100      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002482:	e0c7      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	4013      	ands	r3, r2
 800248e:	d109      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002494:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0549      	lsls	r1, r1, #21
 800249a:	430a      	orrs	r2, r1
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b7d      	ldr	r3, [pc, #500]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d11a      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b0:	4b7a      	ldr	r3, [pc, #488]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b79      	ldr	r3, [pc, #484]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0049      	lsls	r1, r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe fded 	bl	800109c <HAL_GetTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fde8 	bl	800109c <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0d9      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b70      	ldr	r3, [pc, #448]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	039b      	lsls	r3, r3, #14
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	23c0      	movs	r3, #192	; 0xc0
 80024f8:	039b      	lsls	r3, r3, #14
 80024fa:	4013      	ands	r3, r2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d013      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	401a      	ands	r2, r3
 800250c:	23c0      	movs	r3, #192	; 0xc0
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	429a      	cmp	r2, r3
 8002512:	d10a      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	401a      	ands	r2, r3
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	029b      	lsls	r3, r3, #10
 8002522:	429a      	cmp	r2, r3
 8002524:	d101      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0b1      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800252a:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800252c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252e:	23c0      	movs	r3, #192	; 0xc0
 8002530:	029b      	lsls	r3, r3, #10
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03b      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	23c0      	movs	r3, #192	; 0xc0
 8002542:	029b      	lsls	r3, r3, #10
 8002544:	4013      	ands	r3, r2
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d033      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2220      	movs	r2, #32
 8002552:	4013      	ands	r3, r2
 8002554:	d02e      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002556:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255a:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	0309      	lsls	r1, r1, #12
 800256a:	430a      	orrs	r2, r1
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002574:	494b      	ldr	r1, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002576:	400a      	ands	r2, r1
 8002578:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4013      	ands	r3, r2
 8002588:	d014      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fd87 	bl	800109c <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002592:	e009      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fd82 	bl	800109c <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e072      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	4013      	ands	r3, r2
 80025bc:	d01f      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	401a      	ands	r2, r3
 80025c8:	23c0      	movs	r3, #192	; 0xc0
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10c      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x182>
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23c0      	movs	r3, #192	; 0xc0
 80025e0:	039b      	lsls	r3, r3, #14
 80025e2:	401a      	ands	r2, r3
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	23c0      	movs	r3, #192	; 0xc0
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	401a      	ands	r2, r3
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025fe:	2317      	movs	r3, #23
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800260a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800260e:	4928      	ldr	r1, [pc, #160]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002610:	400a      	ands	r2, r1
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	220c      	movs	r2, #12
 8002624:	4393      	bics	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800262e:	430a      	orrs	r2, r1
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264c:	430a      	orrs	r2, r1
 800264e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2208      	movs	r2, #8
 8002656:	4013      	ands	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800266a:	430a      	orrs	r2, r1
 800266c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	4013      	ands	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002688:	430a      	orrs	r2, r1
 800268a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b006      	add	sp, #24
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	fffcffff 	.word	0xfffcffff
 80026a4:	fff7ffff 	.word	0xfff7ffff
 80026a8:	00001388 	.word	0x00001388
 80026ac:	ffcfffff 	.word	0xffcfffff
 80026b0:	efffffff 	.word	0xefffffff
 80026b4:	fffff3ff 	.word	0xfffff3ff
 80026b8:	ffffcfff 	.word	0xffffcfff
 80026bc:	fff3ffff 	.word	0xfff3ffff

080026c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07b      	b.n	80027ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	2382      	movs	r3, #130	; 0x82
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d009      	beq.n	80026fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
 80026ec:	e005      	b.n	80026fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2251      	movs	r2, #81	; 0x51
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2250      	movs	r2, #80	; 0x50
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0018      	movs	r0, r3
 8002718:	f7fe fb24 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2251      	movs	r2, #81	; 0x51
 8002720:	2102      	movs	r1, #2
 8002722:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	438a      	bics	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2382      	movs	r3, #130	; 0x82
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	2384      	movs	r3, #132	; 0x84
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	400b      	ands	r3, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	400b      	ands	r3, r1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2102      	movs	r1, #2
 800275c:	400b      	ands	r3, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2101      	movs	r1, #1
 8002766:	400b      	ands	r3, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6999      	ldr	r1, [r3, #24]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	400b      	ands	r3, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2138      	movs	r1, #56	; 0x38
 800277c:	400b      	ands	r3, r1
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	400b      	ands	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	0011      	movs	r1, r2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	2204      	movs	r2, #4
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2210      	movs	r2, #16
 80027b0:	401a      	ands	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2251      	movs	r2, #81	; 0x51
 80027c4:	2101      	movs	r1, #1
 80027c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	1dbb      	adds	r3, r7, #6
 80027e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2250      	movs	r2, #80	; 0x50
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_SPI_Transmit+0x26>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e145      	b.n	8002a84 <HAL_SPI_Transmit+0x2b2>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2250      	movs	r2, #80	; 0x50
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002800:	f7fe fc4c 	bl	800109c <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002808:	2316      	movs	r3, #22
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	1dba      	adds	r2, r7, #6
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2251      	movs	r2, #81	; 0x51
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d004      	beq.n	8002828 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
    goto error;
 8002826:	e126      	b.n	8002a76 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_SPI_Transmit+0x64>
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
    goto error;
 800283e:	e11a      	b.n	8002a76 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2251      	movs	r2, #81	; 0x51
 8002844:	2103      	movs	r1, #3
 8002846:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1dba      	adds	r2, r7, #6
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1dba      	adds	r2, r7, #6
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	429a      	cmp	r2, r3
 800288c:	d110      	bne.n	80028b0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	438a      	bics	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	01c9      	lsls	r1, r1, #7
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d007      	beq.n	80028ce <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d152      	bne.n	8002980 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_SPI_Transmit+0x11a>
 80028e2:	2316      	movs	r3, #22
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d143      	bne.n	8002974 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002910:	e030      	b.n	8002974 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d112      	bne.n	8002946 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	86da      	strh	r2, [r3, #54]	; 0x36
 8002944:	e016      	b.n	8002974 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002946:	f7fe fba9 	bl	800109c <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d802      	bhi.n	800295c <HAL_SPI_Transmit+0x18a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_SPI_Transmit+0x190>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d108      	bne.n	8002974 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002962:	231f      	movs	r3, #31
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2251      	movs	r2, #81	; 0x51
 800296e:	2101      	movs	r1, #1
 8002970:	5499      	strb	r1, [r3, r2]
          goto error;
 8002972:	e080      	b.n	8002a76 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1c9      	bne.n	8002912 <HAL_SPI_Transmit+0x140>
 800297e:	e053      	b.n	8002a28 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_SPI_Transmit+0x1c0>
 8002988:	2316      	movs	r3, #22
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d145      	bne.n	8002a1e <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029b8:	e031      	b.n	8002a1e <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d113      	bne.n	80029f0 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80029ee:	e016      	b.n	8002a1e <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f0:	f7fe fb54 	bl	800109c <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d802      	bhi.n	8002a06 <HAL_SPI_Transmit+0x234>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_SPI_Transmit+0x23a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2203      	movs	r2, #3
 8002a12:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2251      	movs	r2, #81	; 0x51
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a1c:	e02b      	b.n	8002a76 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1c8      	bne.n	80029ba <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fc1e 	bl	8003270 <SPI_EndRxTxTransaction>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e003      	b.n	8002a76 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2251      	movs	r2, #81	; 0x51
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2250      	movs	r2, #80	; 0x50
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	781b      	ldrb	r3, [r3, #0]
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b008      	add	sp, #32
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9c:	2117      	movs	r1, #23
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2251      	movs	r2, #81	; 0x51
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d003      	beq.n	8002ab8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ab6:	e109      	b.n	8002ccc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	2382      	movs	r3, #130	; 0x82
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d113      	bne.n	8002aec <HAL_SPI_Receive+0x60>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2251      	movs	r2, #81	; 0x51
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ad4:	1dbb      	adds	r3, r7, #6
 8002ad6:	881c      	ldrh	r4, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	0023      	movs	r3, r4
 8002ae4:	f000 f900 	bl	8002ce8 <HAL_SPI_TransmitReceive>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	e0f6      	b.n	8002cda <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2250      	movs	r2, #80	; 0x50
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_Receive+0x6e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0ef      	b.n	8002cda <HAL_SPI_Receive+0x24e>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2250      	movs	r2, #80	; 0x50
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b02:	f7fe facb 	bl	800109c <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_SPI_Receive+0x8c>
 8002b10:	1dbb      	adds	r3, r7, #6
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b20:	e0d4      	b.n	8002ccc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2251      	movs	r2, #81	; 0x51
 8002b26:	2104      	movs	r1, #4
 8002b28:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1dba      	adds	r2, r7, #6
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1dba      	adds	r2, r7, #6
 8002b42:	8812      	ldrh	r2, [r2, #0]
 8002b44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d10f      	bne.n	8002b90 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4956      	ldr	r1, [pc, #344]	; (8002ce4 <HAL_SPI_Receive+0x258>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d007      	beq.n	8002bae <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d000      	beq.n	8002bb8 <HAL_SPI_Receive+0x12c>
 8002bb6:	e06c      	b.n	8002c92 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bb8:	e033      	b.n	8002c22 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d115      	bne.n	8002bf4 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	001a      	movs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf2:	e016      	b.n	8002c22 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf4:	f7fe fa52 	bl	800109c <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d802      	bhi.n	8002c0a <HAL_SPI_Receive+0x17e>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_Receive+0x184>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002c10:	2317      	movs	r3, #23
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2203      	movs	r2, #3
 8002c16:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2251      	movs	r2, #81	; 0x51
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c20:	e054      	b.n	8002ccc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c6      	bne.n	8002bba <HAL_SPI_Receive+0x12e>
 8002c2c:	e036      	b.n	8002c9c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d113      	bne.n	8002c64 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	b292      	uxth	r2, r2
 8002c48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	1c9a      	adds	r2, r3, #2
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c62:	e016      	b.n	8002c92 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c64:	f7fe fa1a 	bl	800109c <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d802      	bhi.n	8002c7a <HAL_SPI_Receive+0x1ee>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_Receive+0x1f4>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2203      	movs	r2, #3
 8002c86:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2251      	movs	r2, #81	; 0x51
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c90:	e01c      	b.n	8002ccc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1c8      	bne.n	8002c2e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fa7a 	bl	800319c <SPI_EndRxTransaction>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8002cba:	2317      	movs	r3, #23
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e003      	b.n	8002ccc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2251      	movs	r2, #81	; 0x51
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2250      	movs	r2, #80	; 0x50
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b007      	add	sp, #28
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	ffffbfff 	.word	0xffffbfff

08002ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	1cbb      	adds	r3, r7, #2
 8002cf8:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cfe:	232b      	movs	r3, #43	; 0x2b
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2250      	movs	r2, #80	; 0x50
 8002d0a:	5c9b      	ldrb	r3, [r3, r2]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x2c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e1b0      	b.n	8003076 <HAL_SPI_TransmitReceive+0x38e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2250      	movs	r2, #80	; 0x50
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1c:	f7fe f9be 	bl	800109c <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d24:	2023      	movs	r0, #35	; 0x23
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	2151      	movs	r1, #81	; 0x51
 8002d2c:	5c52      	ldrb	r2, [r2, r1]
 8002d2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d36:	231a      	movs	r3, #26
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	1cba      	adds	r2, r7, #2
 8002d3c:	8812      	ldrh	r2, [r2, #0]
 8002d3e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d011      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x84>
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	2382      	movs	r3, #130	; 0x82
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d107      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x7a>
 8002d5a:	183b      	adds	r3, r7, r0
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d004      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d62:	232b      	movs	r3, #43	; 0x2b
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2202      	movs	r2, #2
 8002d68:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d6a:	e17d      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x98>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x98>
 8002d78:	1cbb      	adds	r3, r7, #2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d80:	232b      	movs	r3, #43	; 0x2b
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d88:	e16e      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2251      	movs	r2, #81	; 0x51
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2251      	movs	r2, #81	; 0x51
 8002d9a:	2105      	movs	r1, #5
 8002d9c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1cba      	adds	r2, r7, #2
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1cba      	adds	r2, r7, #2
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1cba      	adds	r2, r7, #2
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1cba      	adds	r2, r7, #2
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d007      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d000      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x120>
 8002e06:	e07f      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x134>
 8002e10:	231a      	movs	r3, #26
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d000      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x134>
 8002e1a:	e06a      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e40:	e057      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d11b      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x1a0>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x1a0>
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d113      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d119      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x1e2>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d014      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eca:	f7fe f8e7 	bl	800109c <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d80b      	bhi.n	8002ef2 <HAL_SPI_TransmitReceive+0x20a>
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	3301      	adds	r3, #1
 8002ede:	d008      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8002ee0:	232b      	movs	r3, #43	; 0x2b
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2251      	movs	r2, #81	; 0x51
 8002eec:	2101      	movs	r1, #1
 8002eee:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ef0:	e0ba      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1a2      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x15a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d19d      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x15a>
 8002f06:	e083      	b.n	8003010 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0x234>
 8002f10:	231a      	movs	r3, #26
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d000      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0x234>
 8002f1a:	e06f      	b.n	8002ffc <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f42:	e05b      	b.n	8002ffc <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11c      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2a4>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x2a4>
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d114      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d119      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x2e6>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d014      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fce:	f7fe f865 	bl	800109c <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_SPI_TransmitReceive+0x2fc>
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	d102      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x302>
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d108      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8002fea:	232b      	movs	r3, #43	; 0x2b
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2251      	movs	r2, #81	; 0x51
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ffa:	e035      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d19e      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x25c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d199      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f92a 	bl	8003270 <SPI_EndRxTxTransaction>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d007      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003020:	232b      	movs	r3, #43	; 0x2b
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800302e:	e01b      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8003056:	232b      	movs	r3, #43	; 0x2b
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e003      	b.n	8003068 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2251      	movs	r2, #81	; 0x51
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2250      	movs	r2, #80	; 0x50
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003070:	232b      	movs	r3, #43	; 0x2b
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	781b      	ldrb	r3, [r3, #0]
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b00c      	add	sp, #48	; 0x30
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003090:	f7fe f804 	bl	800109c <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030a0:	f7fd fffc 	bl	800109c <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030a8:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	0d1b      	lsrs	r3, r3, #20
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	4353      	muls	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030b6:	e058      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	d055      	beq.n	800316a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030be:	f7fd ffed 	bl	800109c <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d142      	bne.n	800315a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	21e0      	movs	r1, #224	; 0xe0
 80030e0:	438a      	bics	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	2382      	movs	r3, #130	; 0x82
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d113      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x98>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d005      	beq.n	8003108 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	019b      	lsls	r3, r3, #6
 8003120:	429a      	cmp	r2, r3
 8003122:	d110      	bne.n	8003146 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	491a      	ldr	r1, [pc, #104]	; (8003198 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0189      	lsls	r1, r1, #6
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2251      	movs	r2, #81	; 0x51
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2250      	movs	r2, #80	; 0x50
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e017      	b.n	800318a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3b01      	subs	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	425a      	negs	r2, r3
 800317a:	4153      	adcs	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	001a      	movs	r2, r3
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d197      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b008      	add	sp, #32
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	20000008 	.word	0x20000008
 8003198:	ffffdfff 	.word	0xffffdfff

0800319c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2382      	movs	r3, #130	; 0x82
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d113      	bne.n	80031dc <SPI_EndRxTransaction+0x40>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	429a      	cmp	r2, r3
 80031be:	d005      	beq.n	80031cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	2382      	movs	r3, #130	; 0x82
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d12b      	bne.n	8003240 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d012      	beq.n	800321a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	0013      	movs	r3, r2
 80031fe:	2200      	movs	r2, #0
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	f7ff ff3d 	bl	8003080 <SPI_WaitFlagStateUntilTimeout>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d02d      	beq.n	8003266 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	2220      	movs	r2, #32
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e026      	b.n	8003268 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	0013      	movs	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	2101      	movs	r1, #1
 8003228:	f7ff ff2a 	bl	8003080 <SPI_WaitFlagStateUntilTimeout>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d01a      	beq.n	8003266 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	2220      	movs	r2, #32
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e013      	b.n	8003268 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	0013      	movs	r3, r2
 800324a:	2200      	movs	r2, #0
 800324c:	2101      	movs	r1, #1
 800324e:	f7ff ff17 	bl	8003080 <SPI_WaitFlagStateUntilTimeout>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d007      	beq.n	8003266 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	2220      	movs	r2, #32
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e000      	b.n	8003268 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}

08003270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <SPI_EndRxTxTransaction+0x84>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	491d      	ldr	r1, [pc, #116]	; (80032f8 <SPI_EndRxTxTransaction+0x88>)
 8003282:	0018      	movs	r0, r3
 8003284:	f7fc ff48 	bl	8000118 <__udivsi3>
 8003288:	0003      	movs	r3, r0
 800328a:	001a      	movs	r2, r3
 800328c:	0013      	movs	r3, r2
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	189b      	adds	r3, r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	2382      	movs	r3, #130	; 0x82
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d112      	bne.n	80032cc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	0013      	movs	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	f7ff fee4 	bl	8003080 <SPI_WaitFlagStateUntilTimeout>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d016      	beq.n	80032ea <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	2220      	movs	r2, #32
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e00f      	b.n	80032ec <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d0f2      	beq.n	80032cc <SPI_EndRxTxTransaction+0x5c>
 80032e6:	e000      	b.n	80032ea <SPI_EndRxTxTransaction+0x7a>
        break;
 80032e8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000008 	.word	0x20000008
 80032f8:	016e3600 	.word	0x016e3600

080032fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e044      	b.n	8003398 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2278      	movs	r2, #120	; 0x78
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd fd63 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2224      	movs	r2, #36	; 0x24
 800332a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	438a      	bics	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0018      	movs	r0, r3
 8003340:	f000 fbce 	bl	8003ae0 <UART_SetConfig>
 8003344:	0003      	movs	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e024      	b.n	8003398 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fe0b 	bl	8003f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	490d      	ldr	r1, [pc, #52]	; (80033a0 <HAL_UART_Init+0xa4>)
 800336a:	400a      	ands	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	212a      	movs	r1, #42	; 0x2a
 800337a:	438a      	bics	r2, r1
 800337c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fea3 	bl	80040dc <UART_CheckIdleState>
 8003396:	0003      	movs	r3, r0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	ffffb7ff 	.word	0xffffb7ff

080033a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	1dbb      	adds	r3, r7, #6
 80033b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d000      	beq.n	80033be <HAL_UART_Transmit+0x1a>
 80033bc:	e08c      	b.n	80034d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_UART_Transmit+0x28>
 80033c4:	1dbb      	adds	r3, r7, #6
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e084      	b.n	80034da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	015b      	lsls	r3, r3, #5
 80033d8:	429a      	cmp	r2, r3
 80033da:	d109      	bne.n	80033f0 <HAL_UART_Transmit+0x4c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e074      	b.n	80034da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2284      	movs	r2, #132	; 0x84
 80033f4:	2100      	movs	r1, #0
 80033f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2221      	movs	r2, #33	; 0x21
 80033fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fd fe4d 	bl	800109c <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1dba      	adds	r2, r7, #6
 800340a:	2150      	movs	r1, #80	; 0x50
 800340c:	8812      	ldrh	r2, [r2, #0]
 800340e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1dba      	adds	r2, r7, #6
 8003414:	2152      	movs	r1, #82	; 0x52
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	429a      	cmp	r2, r3
 8003424:	d108      	bne.n	8003438 <HAL_UART_Transmit+0x94>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e003      	b.n	8003440 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003440:	e02f      	b.n	80034a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	0013      	movs	r3, r2
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	f000 feec 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d004      	beq.n	8003462 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e03b      	b.n	80034da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	001a      	movs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	05d2      	lsls	r2, r2, #23
 8003474:	0dd2      	lsrs	r2, r2, #23
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	3302      	adds	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e007      	b.n	8003490 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	781a      	ldrb	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2252      	movs	r2, #82	; 0x52
 8003494:	5a9b      	ldrh	r3, [r3, r2]
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b299      	uxth	r1, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2252      	movs	r2, #82	; 0x52
 80034a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2252      	movs	r2, #82	; 0x52
 80034a6:	5a9b      	ldrh	r3, [r3, r2]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1c9      	bne.n	8003442 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	0013      	movs	r3, r2
 80034b8:	2200      	movs	r2, #0
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	f000 feb6 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d004      	beq.n	80034ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e005      	b.n	80034da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b008      	add	sp, #32
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b0ab      	sub	sp, #172	; 0xac
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	22a4      	movs	r2, #164	; 0xa4
 80034f4:	18b9      	adds	r1, r7, r2
 80034f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	20a0      	movs	r0, #160	; 0xa0
 8003500:	1839      	adds	r1, r7, r0
 8003502:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	219c      	movs	r1, #156	; 0x9c
 800350c:	1879      	adds	r1, r7, r1
 800350e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003510:	0011      	movs	r1, r2
 8003512:	18bb      	adds	r3, r7, r2
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a99      	ldr	r2, [pc, #612]	; (800377c <HAL_UART_IRQHandler+0x298>)
 8003518:	4013      	ands	r3, r2
 800351a:	2298      	movs	r2, #152	; 0x98
 800351c:	18bc      	adds	r4, r7, r2
 800351e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003520:	18bb      	adds	r3, r7, r2
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d114      	bne.n	8003552 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003528:	187b      	adds	r3, r7, r1
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2220      	movs	r2, #32
 800352e:	4013      	ands	r3, r2
 8003530:	d00f      	beq.n	8003552 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003532:	183b      	adds	r3, r7, r0
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2220      	movs	r2, #32
 8003538:	4013      	ands	r3, r2
 800353a:	d00a      	beq.n	8003552 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	2b00      	cmp	r3, #0
 8003542:	d100      	bne.n	8003546 <HAL_UART_IRQHandler+0x62>
 8003544:	e2a0      	b.n	8003a88 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	0010      	movs	r0, r2
 800354e:	4798      	blx	r3
      }
      return;
 8003550:	e29a      	b.n	8003a88 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003552:	2398      	movs	r3, #152	; 0x98
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d100      	bne.n	800355e <HAL_UART_IRQHandler+0x7a>
 800355c:	e114      	b.n	8003788 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800355e:	239c      	movs	r3, #156	; 0x9c
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	4013      	ands	r3, r2
 8003568:	d106      	bne.n	8003578 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800356a:	23a0      	movs	r3, #160	; 0xa0
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a83      	ldr	r2, [pc, #524]	; (8003780 <HAL_UART_IRQHandler+0x29c>)
 8003572:	4013      	ands	r3, r2
 8003574:	d100      	bne.n	8003578 <HAL_UART_IRQHandler+0x94>
 8003576:	e107      	b.n	8003788 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003578:	23a4      	movs	r3, #164	; 0xa4
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	d012      	beq.n	80035aa <HAL_UART_IRQHandler+0xc6>
 8003584:	23a0      	movs	r3, #160	; 0xa0
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4013      	ands	r3, r2
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2284      	movs	r2, #132	; 0x84
 800359e:	589b      	ldr	r3, [r3, r2]
 80035a0:	2201      	movs	r2, #1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2184      	movs	r1, #132	; 0x84
 80035a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035aa:	23a4      	movs	r3, #164	; 0xa4
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d011      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
 80035b6:	239c      	movs	r3, #156	; 0x9c
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	d00b      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2284      	movs	r2, #132	; 0x84
 80035ce:	589b      	ldr	r3, [r3, r2]
 80035d0:	2204      	movs	r2, #4
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2184      	movs	r1, #132	; 0x84
 80035d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035da:	23a4      	movs	r3, #164	; 0xa4
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d011      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
 80035e6:	239c      	movs	r3, #156	; 0x9c
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00b      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2284      	movs	r2, #132	; 0x84
 80035fe:	589b      	ldr	r3, [r3, r2]
 8003600:	2202      	movs	r2, #2
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2184      	movs	r1, #132	; 0x84
 8003608:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800360a:	23a4      	movs	r3, #164	; 0xa4
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	4013      	ands	r3, r2
 8003614:	d017      	beq.n	8003646 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003616:	23a0      	movs	r3, #160	; 0xa0
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2220      	movs	r2, #32
 800361e:	4013      	ands	r3, r2
 8003620:	d105      	bne.n	800362e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003622:	239c      	movs	r3, #156	; 0x9c
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2201      	movs	r2, #1
 800362a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800362c:	d00b      	beq.n	8003646 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2208      	movs	r2, #8
 8003634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2284      	movs	r2, #132	; 0x84
 800363a:	589b      	ldr	r3, [r3, r2]
 800363c:	2208      	movs	r2, #8
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2184      	movs	r1, #132	; 0x84
 8003644:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003646:	23a4      	movs	r3, #164	; 0xa4
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4013      	ands	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_UART_IRQHandler+0x198>
 8003654:	23a0      	movs	r3, #160	; 0xa0
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	04db      	lsls	r3, r3, #19
 800365e:	4013      	ands	r3, r2
 8003660:	d00c      	beq.n	800367c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2284      	movs	r2, #132	; 0x84
 8003670:	589b      	ldr	r3, [r3, r2]
 8003672:	2220      	movs	r2, #32
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2184      	movs	r1, #132	; 0x84
 800367a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2284      	movs	r2, #132	; 0x84
 8003680:	589b      	ldr	r3, [r3, r2]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d100      	bne.n	8003688 <HAL_UART_IRQHandler+0x1a4>
 8003686:	e201      	b.n	8003a8c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003688:	23a4      	movs	r3, #164	; 0xa4
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2220      	movs	r2, #32
 8003690:	4013      	ands	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003694:	23a0      	movs	r3, #160	; 0xa0
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2220      	movs	r2, #32
 800369c:	4013      	ands	r3, r2
 800369e:	d008      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	0010      	movs	r0, r2
 80036b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2284      	movs	r2, #132	; 0x84
 80036b6:	589b      	ldr	r3, [r3, r2]
 80036b8:	2194      	movs	r1, #148	; 0x94
 80036ba:	187a      	adds	r2, r7, r1
 80036bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d004      	beq.n	80036d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2228      	movs	r2, #40	; 0x28
 80036d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d4:	d047      	beq.n	8003766 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fe11 	bl	8004300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2240      	movs	r2, #64	; 0x40
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d137      	bne.n	800375c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80036f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f4:	2090      	movs	r0, #144	; 0x90
 80036f6:	183a      	adds	r2, r7, r0
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	2301      	movs	r3, #1
 80036fc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	438a      	bics	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	183b      	adds	r3, r7, r0
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	f383 8810 	msr	PRIMASK, r3
}
 8003722:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	2b00      	cmp	r3, #0
 800372a:	d012      	beq.n	8003752 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_UART_IRQHandler+0x2a0>)
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	0018      	movs	r0, r3
 800373a:	f7fd fe73 	bl	8001424 <HAL_DMA_Abort_IT>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d01a      	beq.n	8003778 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374c:	0018      	movs	r0, r3
 800374e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e012      	b.n	8003778 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f9af 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375a:	e00d      	b.n	8003778 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f9aa 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e008      	b.n	8003778 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f9a5 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2284      	movs	r2, #132	; 0x84
 8003772:	2100      	movs	r1, #0
 8003774:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003776:	e189      	b.n	8003a8c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	46c0      	nop			; (mov r8, r8)
    return;
 800377a:	e187      	b.n	8003a8c <HAL_UART_IRQHandler+0x5a8>
 800377c:	0000080f 	.word	0x0000080f
 8003780:	04000120 	.word	0x04000120
 8003784:	080043c9 	.word	0x080043c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	2b01      	cmp	r3, #1
 800378e:	d000      	beq.n	8003792 <HAL_UART_IRQHandler+0x2ae>
 8003790:	e13b      	b.n	8003a0a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003792:	23a4      	movs	r3, #164	; 0xa4
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2210      	movs	r2, #16
 800379a:	4013      	ands	r3, r2
 800379c:	d100      	bne.n	80037a0 <HAL_UART_IRQHandler+0x2bc>
 800379e:	e134      	b.n	8003a0a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037a0:	23a0      	movs	r3, #160	; 0xa0
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2210      	movs	r2, #16
 80037a8:	4013      	ands	r3, r2
 80037aa:	d100      	bne.n	80037ae <HAL_UART_IRQHandler+0x2ca>
 80037ac:	e12d      	b.n	8003a0a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2210      	movs	r2, #16
 80037b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2240      	movs	r2, #64	; 0x40
 80037be:	4013      	ands	r3, r2
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d000      	beq.n	80037c6 <HAL_UART_IRQHandler+0x2e2>
 80037c4:	e0a1      	b.n	800390a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	217e      	movs	r1, #126	; 0x7e
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d100      	bne.n	80037de <HAL_UART_IRQHandler+0x2fa>
 80037dc:	e158      	b.n	8003a90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2258      	movs	r2, #88	; 0x58
 80037e2:	5a9b      	ldrh	r3, [r3, r2]
 80037e4:	187a      	adds	r2, r7, r1
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d300      	bcc.n	80037ee <HAL_UART_IRQHandler+0x30a>
 80037ec:	e150      	b.n	8003a90 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	187a      	adds	r2, r7, r1
 80037f2:	215a      	movs	r1, #90	; 0x5a
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	4013      	ands	r3, r2
 8003804:	d16f      	bne.n	80038e6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800380e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003810:	2301      	movs	r3, #1
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	499e      	ldr	r1, [pc, #632]	; (8003aa0 <HAL_UART_IRQHandler+0x5bc>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	677b      	str	r3, [r7, #116]	; 0x74
 8003842:	2301      	movs	r3, #1
 8003844:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	438a      	bics	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003870:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	673b      	str	r3, [r7, #112]	; 0x70
 8003874:	2301      	movs	r3, #1
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	438a      	bics	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003892:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2280      	movs	r2, #128	; 0x80
 80038a0:	2120      	movs	r1, #32
 80038a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038aa:	f3ef 8310 	mrs	r3, PRIMASK
 80038ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80038b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b4:	2301      	movs	r3, #1
 80038b6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2110      	movs	r1, #16
 80038cc:	438a      	bics	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fd fd5f 	bl	80013a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2258      	movs	r2, #88	; 0x58
 80038f0:	5a9a      	ldrh	r2, [r3, r2]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	215a      	movs	r1, #90	; 0x5a
 80038f6:	5a5b      	ldrh	r3, [r3, r1]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f8e0 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003908:	e0c2      	b.n	8003a90 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2258      	movs	r2, #88	; 0x58
 800390e:	5a99      	ldrh	r1, [r3, r2]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	225a      	movs	r2, #90	; 0x5a
 8003914:	5a9b      	ldrh	r3, [r3, r2]
 8003916:	b29a      	uxth	r2, r3
 8003918:	208e      	movs	r0, #142	; 0x8e
 800391a:	183b      	adds	r3, r7, r0
 800391c:	1a8a      	subs	r2, r1, r2
 800391e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	225a      	movs	r2, #90	; 0x5a
 8003924:	5a9b      	ldrh	r3, [r3, r2]
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <HAL_UART_IRQHandler+0x44a>
 800392c:	e0b2      	b.n	8003a94 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800392e:	183b      	adds	r3, r7, r0
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d100      	bne.n	8003938 <HAL_UART_IRQHandler+0x454>
 8003936:	e0ad      	b.n	8003a94 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003938:	f3ef 8310 	mrs	r3, PRIMASK
 800393c:	60fb      	str	r3, [r7, #12]
  return(result);
 800393e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003940:	2488      	movs	r4, #136	; 0x88
 8003942:	193a      	adds	r2, r7, r4
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	2301      	movs	r3, #1
 8003948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4951      	ldr	r1, [pc, #324]	; (8003aa4 <HAL_UART_IRQHandler+0x5c0>)
 800395e:	400a      	ands	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	193b      	adds	r3, r7, r4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003970:	f3ef 8310 	mrs	r3, PRIMASK
 8003974:	61bb      	str	r3, [r7, #24]
  return(result);
 8003976:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	2484      	movs	r4, #132	; 0x84
 800397a:	193a      	adds	r2, r7, r4
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	2301      	movs	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	438a      	bics	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	193b      	adds	r3, r7, r4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	2120      	movs	r1, #32
 80039ae:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	2480      	movs	r4, #128	; 0x80
 80039c6:	193a      	adds	r2, r7, r4
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	2301      	movs	r3, #1
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2110      	movs	r1, #16
 80039e2:	438a      	bics	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	193b      	adds	r3, r7, r4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0011      	movs	r1, r2
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 f860 	bl	8003ac8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a08:	e044      	b.n	8003a94 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a0a:	23a4      	movs	r3, #164	; 0xa4
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	035b      	lsls	r3, r3, #13
 8003a14:	4013      	ands	r3, r2
 8003a16:	d010      	beq.n	8003a3a <HAL_UART_IRQHandler+0x556>
 8003a18:	239c      	movs	r3, #156	; 0x9c
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	03db      	lsls	r3, r3, #15
 8003a22:	4013      	ands	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	0352      	lsls	r2, r2, #13
 8003a2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 fd0a 	bl	800444c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a38:	e02f      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3a:	23a4      	movs	r3, #164	; 0xa4
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a46:	23a0      	movs	r3, #160	; 0xa0
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01e      	beq.n	8003a98 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	0010      	movs	r0, r2
 8003a62:	4798      	blx	r3
    }
    return;
 8003a64:	e018      	b.n	8003a98 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a66:	23a4      	movs	r3, #164	; 0xa4
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
 8003a72:	23a0      	movs	r3, #160	; 0xa0
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d00d      	beq.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 fcb8 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 8003a86:	e008      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	e006      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	e004      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	e002      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	e000      	b.n	8003a9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003a98:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b02b      	add	sp, #172	; 0xac
 8003a9e:	bd90      	pop	{r4, r7, pc}
 8003aa0:	fffffeff 	.word	0xfffffeff
 8003aa4:	fffffedf 	.word	0xfffffedf

08003aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	b5b0      	push	{r4, r5, r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae8:	231a      	movs	r3, #26
 8003aea:	2218      	movs	r2, #24
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4ab4      	ldr	r2, [pc, #720]	; (8003de4 <UART_SetConfig+0x304>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4aaf      	ldr	r2, [pc, #700]	; (8003de8 <UART_SetConfig+0x308>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4aa9      	ldr	r2, [pc, #676]	; (8003dec <UART_SetConfig+0x30c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b50:	4313      	orrs	r3, r2
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4aa5      	ldr	r2, [pc, #660]	; (8003df0 <UART_SetConfig+0x310>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4aa1      	ldr	r2, [pc, #644]	; (8003df4 <UART_SetConfig+0x314>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d131      	bne.n	8003bd8 <UART_SetConfig+0xf8>
 8003b74:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <UART_SetConfig+0x318>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b78:	220c      	movs	r2, #12
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d01d      	beq.n	8003bbc <UART_SetConfig+0xdc>
 8003b80:	d823      	bhi.n	8003bca <UART_SetConfig+0xea>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d00c      	beq.n	8003ba0 <UART_SetConfig+0xc0>
 8003b86:	d820      	bhi.n	8003bca <UART_SetConfig+0xea>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <UART_SetConfig+0xb2>
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00e      	beq.n	8003bae <UART_SetConfig+0xce>
 8003b90:	e01b      	b.n	8003bca <UART_SetConfig+0xea>
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e065      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003ba0:	231b      	movs	r3, #27
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e05e      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bae:	231b      	movs	r3, #27
 8003bb0:	2218      	movs	r2, #24
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	19db      	adds	r3, r3, r7
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e057      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bbc:	231b      	movs	r3, #27
 8003bbe:	2218      	movs	r2, #24
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	19db      	adds	r3, r3, r7
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e050      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bca:	231b      	movs	r3, #27
 8003bcc:	2218      	movs	r2, #24
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e049      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a83      	ldr	r2, [pc, #524]	; (8003dec <UART_SetConfig+0x30c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d13e      	bne.n	8003c60 <UART_SetConfig+0x180>
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <UART_SetConfig+0x318>)
 8003be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be6:	23c0      	movs	r3, #192	; 0xc0
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	22c0      	movs	r2, #192	; 0xc0
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <UART_SetConfig+0x164>
 8003bf4:	22c0      	movs	r2, #192	; 0xc0
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d82a      	bhi.n	8003c52 <UART_SetConfig+0x172>
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d011      	beq.n	8003c28 <UART_SetConfig+0x148>
 8003c04:	2280      	movs	r2, #128	; 0x80
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d822      	bhi.n	8003c52 <UART_SetConfig+0x172>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <UART_SetConfig+0x13a>
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <UART_SetConfig+0x156>
 8003c18:	e01b      	b.n	8003c52 <UART_SetConfig+0x172>
 8003c1a:	231b      	movs	r3, #27
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e021      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c28:	231b      	movs	r3, #27
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e01a      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c36:	231b      	movs	r3, #27
 8003c38:	2218      	movs	r2, #24
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e013      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c44:	231b      	movs	r3, #27
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e00c      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c52:	231b      	movs	r3, #27
 8003c54:	2218      	movs	r2, #24
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e005      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c60:	231b      	movs	r3, #27
 8003c62:	2218      	movs	r2, #24
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2210      	movs	r2, #16
 8003c6a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5e      	ldr	r2, [pc, #376]	; (8003dec <UART_SetConfig+0x30c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d000      	beq.n	8003c78 <UART_SetConfig+0x198>
 8003c76:	e084      	b.n	8003d82 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c78:	231b      	movs	r3, #27
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d01d      	beq.n	8003cc2 <UART_SetConfig+0x1e2>
 8003c86:	dc20      	bgt.n	8003cca <UART_SetConfig+0x1ea>
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d015      	beq.n	8003cb8 <UART_SetConfig+0x1d8>
 8003c8c:	dc1d      	bgt.n	8003cca <UART_SetConfig+0x1ea>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x1b8>
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d005      	beq.n	8003ca2 <UART_SetConfig+0x1c2>
 8003c96:	e018      	b.n	8003cca <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7fe fbba 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ca0:	e01c      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca2:	4b55      	ldr	r3, [pc, #340]	; (8003df8 <UART_SetConfig+0x318>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d002      	beq.n	8003cb2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <UART_SetConfig+0x31c>)
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003cb0:	e014      	b.n	8003cdc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003cb2:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <UART_SetConfig+0x320>)
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cb6:	e011      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb8:	f7fe fafa 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cc0:	e00c      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cc8:	e008      	b.n	8003cdc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003cce:	231a      	movs	r3, #26
 8003cd0:	2218      	movs	r2, #24
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
        break;
 8003cda:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <UART_SetConfig+0x204>
 8003ce2:	e12f      	b.n	8003f44 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	0013      	movs	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d305      	bcc.n	8003d00 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d906      	bls.n	8003d0e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003d00:	231a      	movs	r3, #26
 8003d02:	2218      	movs	r2, #24
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e11a      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	000b      	movs	r3, r1
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	0010      	movs	r0, r2
 8003d20:	0205      	lsls	r5, r0, #8
 8003d22:	431d      	orrs	r5, r3
 8003d24:	000b      	movs	r3, r1
 8003d26:	021c      	lsls	r4, r3, #8
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68b8      	ldr	r0, [r7, #8]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	1900      	adds	r0, r0, r4
 8003d3a:	4169      	adcs	r1, r5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f7fc fa71 	bl	8000230 <__aeabi_uldivmod>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	000b      	movs	r3, r1
 8003d52:	0013      	movs	r3, r2
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d58:	23c0      	movs	r3, #192	; 0xc0
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d309      	bcc.n	8003d74 <UART_SetConfig+0x294>
 8003d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	035b      	lsls	r3, r3, #13
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d204      	bcs.n	8003d74 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e0e7      	b.n	8003f44 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003d74:	231a      	movs	r3, #26
 8003d76:	2218      	movs	r2, #24
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e0e0      	b.n	8003f44 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d000      	beq.n	8003d90 <UART_SetConfig+0x2b0>
 8003d8e:	e082      	b.n	8003e96 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003d90:	231b      	movs	r3, #27
 8003d92:	2218      	movs	r2, #24
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d834      	bhi.n	8003e08 <UART_SetConfig+0x328>
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <UART_SetConfig+0x324>)
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7fe fb32 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003dac:	0003      	movs	r3, r0
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003db0:	e033      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db2:	f7fe fb43 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003db6:	0003      	movs	r3, r0
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dba:	e02e      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <UART_SetConfig+0x318>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <UART_SetConfig+0x31c>)
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dca:	e026      	b.n	8003e1a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <UART_SetConfig+0x320>)
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd0:	e023      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fa6d 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dda:	e01e      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003de2:	e01a      	b.n	8003e1a <UART_SetConfig+0x33a>
 8003de4:	efff69f3 	.word	0xefff69f3
 8003de8:	ffffcfff 	.word	0xffffcfff
 8003dec:	40004800 	.word	0x40004800
 8003df0:	fffff4ff 	.word	0xfffff4ff
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	08004500 	.word	0x08004500
      default:
        pclk = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e0c:	231a      	movs	r3, #26
 8003e0e:	2218      	movs	r2, #24
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	19db      	adds	r3, r3, r7
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
        break;
 8003e18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d100      	bne.n	8003e22 <UART_SetConfig+0x342>
 8003e20:	e090      	b.n	8003f44 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	005a      	lsls	r2, r3, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	18d2      	adds	r2, r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0019      	movs	r1, r3
 8003e34:	0010      	movs	r0, r2
 8003e36:	f7fc f96f 	bl	8000118 <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d921      	bls.n	8003e88 <UART_SetConfig+0x3a8>
 8003e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d21c      	bcs.n	8003e88 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	200e      	movs	r0, #14
 8003e54:	2418      	movs	r4, #24
 8003e56:	1903      	adds	r3, r0, r4
 8003e58:	19db      	adds	r3, r3, r7
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2207      	movs	r2, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	1903      	adds	r3, r0, r4
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	1902      	adds	r2, r0, r4
 8003e72:	19d2      	adds	r2, r2, r7
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1902      	adds	r2, r0, r4
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e05d      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	231a      	movs	r3, #26
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e056      	b.n	8003f44 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e96:	231b      	movs	r3, #27
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d822      	bhi.n	8003eea <UART_SetConfig+0x40a>
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <UART_SetConfig+0x484>)
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eae:	f7fe faaf 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eb6:	e021      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7fe fac0 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ec0:	e01c      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <UART_SetConfig+0x488>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <UART_SetConfig+0x48c>)
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ed0:	e014      	b.n	8003efc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <UART_SetConfig+0x490>)
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ed6:	e011      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed8:	f7fe f9ea 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8003edc:	0003      	movs	r3, r0
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003eee:	231a      	movs	r3, #26
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
        break;
 8003efa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f7fc f900 	bl	8000118 <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d90a      	bls.n	8003f38 <UART_SetConfig+0x458>
 8003f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	025b      	lsls	r3, r3, #9
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d205      	bcs.n	8003f38 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e005      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003f38:	231a      	movs	r3, #26
 8003f3a:	2218      	movs	r2, #24
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2200      	movs	r2, #0
 8003f48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f50:	231a      	movs	r3, #26
 8003f52:	2218      	movs	r2, #24
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b00e      	add	sp, #56	; 0x38
 8003f60:	bdb0      	pop	{r4, r5, r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	08004524 	.word	0x08004524
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	003d0900 	.word	0x003d0900
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <UART_AdvFeatureConfig+0x144>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a43      	ldr	r2, [pc, #268]	; (80040bc <UART_AdvFeatureConfig+0x148>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a3b      	ldr	r2, [pc, #236]	; (80040c0 <UART_AdvFeatureConfig+0x14c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d00b      	beq.n	8004004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <UART_AdvFeatureConfig+0x150>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2210      	movs	r2, #16
 800400a:	4013      	ands	r3, r2
 800400c:	d00b      	beq.n	8004026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <UART_AdvFeatureConfig+0x154>)
 8004016:	4013      	ands	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2220      	movs	r2, #32
 800402c:	4013      	ands	r3, r2
 800402e:	d00b      	beq.n	8004048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a25      	ldr	r2, [pc, #148]	; (80040cc <UART_AdvFeatureConfig+0x158>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	4013      	ands	r3, r2
 8004050:	d01d      	beq.n	800408e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <UART_AdvFeatureConfig+0x15c>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	035b      	lsls	r3, r3, #13
 8004072:	429a      	cmp	r2, r3
 8004074:	d10b      	bne.n	800408e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <UART_AdvFeatureConfig+0x160>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <UART_AdvFeatureConfig+0x164>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	fffdffff 	.word	0xfffdffff
 80040bc:	fffeffff 	.word	0xfffeffff
 80040c0:	fffbffff 	.word	0xfffbffff
 80040c4:	ffff7fff 	.word	0xffff7fff
 80040c8:	ffffefff 	.word	0xffffefff
 80040cc:	ffffdfff 	.word	0xffffdfff
 80040d0:	ffefffff 	.word	0xffefffff
 80040d4:	ff9fffff 	.word	0xff9fffff
 80040d8:	fff7ffff 	.word	0xfff7ffff

080040dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b092      	sub	sp, #72	; 0x48
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2284      	movs	r2, #132	; 0x84
 80040e8:	2100      	movs	r1, #0
 80040ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fc ffd6 	bl	800109c <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2208      	movs	r2, #8
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d12c      	bne.n	800415c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	2280      	movs	r2, #128	; 0x80
 8004106:	0391      	lsls	r1, r2, #14
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4a46      	ldr	r2, [pc, #280]	; (8004224 <UART_CheckIdleState+0x148>)
 800410c:	9200      	str	r2, [sp, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	f000 f88c 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d021      	beq.n	800415c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004118:	f3ef 8310 	mrs	r3, PRIMASK
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
 8004122:	2301      	movs	r3, #1
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	438a      	bics	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2278      	movs	r2, #120	; 0x78
 8004154:	2100      	movs	r1, #0
 8004156:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e05f      	b.n	800421c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	4013      	ands	r3, r2
 8004166:	2b04      	cmp	r3, #4
 8004168:	d146      	bne.n	80041f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	03d1      	lsls	r1, r2, #15
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <UART_CheckIdleState+0x148>)
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f858 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d03b      	beq.n	80041f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004180:	f3ef 8310 	mrs	r3, PRIMASK
 8004184:	60fb      	str	r3, [r7, #12]
  return(result);
 8004186:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	2301      	movs	r3, #1
 800418c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4921      	ldr	r1, [pc, #132]	; (8004228 <UART_CheckIdleState+0x14c>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
 80041bc:	2301      	movs	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	438a      	bics	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	2120      	movs	r1, #32
 80041ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2278      	movs	r2, #120	; 0x78
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e011      	b.n	800421c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	2120      	movs	r1, #32
 8004204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2278      	movs	r2, #120	; 0x78
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b010      	add	sp, #64	; 0x40
 8004222:	bd80      	pop	{r7, pc}
 8004224:	01ffffff 	.word	0x01ffffff
 8004228:	fffffedf 	.word	0xfffffedf

0800422c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	e04b      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3301      	adds	r3, #1
 8004242:	d048      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fc ff2a 	bl	800109c <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e04b      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	4013      	ands	r3, r2
 8004268:	d035      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2208      	movs	r2, #8
 8004272:	4013      	ands	r3, r2
 8004274:	2b08      	cmp	r3, #8
 8004276:	d111      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f83c 	bl	8004300 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2284      	movs	r2, #132	; 0x84
 800428c:	2108      	movs	r1, #8
 800428e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2278      	movs	r2, #120	; 0x78
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e02c      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	401a      	ands	r2, r3
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d112      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f81f 	bl	8004300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2284      	movs	r2, #132	; 0x84
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2278      	movs	r2, #120	; 0x78
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0a4      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	617b      	str	r3, [r7, #20]
  return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4926      	ldr	r1, [pc, #152]	; (80043c4 <UART_EndRxTransfer+0xc4>)
 800432a:	400a      	ands	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	623b      	str	r3, [r7, #32]
  return(result);
 8004340:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	438a      	bics	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	60bb      	str	r3, [r7, #8]
  return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437e:	2301      	movs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2110      	movs	r1, #16
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	2120      	movs	r1, #32
 80043ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b00e      	add	sp, #56	; 0x38
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	fffffedf 	.word	0xfffffedf

080043c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	225a      	movs	r2, #90	; 0x5a
 80043da:	2100      	movs	r1, #0
 80043dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2252      	movs	r2, #82	; 0x52
 80043e2:	2100      	movs	r1, #0
 80043e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff fb65 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b004      	add	sp, #16
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	60bb      	str	r3, [r7, #8]
  return(result);
 8004404:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	2301      	movs	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	438a      	bics	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff fb32 	bl	8003aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b006      	add	sp, #24
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <memset>:
 800445c:	0003      	movs	r3, r0
 800445e:	1882      	adds	r2, r0, r2
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	7019      	strb	r1, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2600      	movs	r6, #0
 8004470:	4c0c      	ldr	r4, [pc, #48]	; (80044a4 <__libc_init_array+0x38>)
 8004472:	4d0d      	ldr	r5, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	2600      	movs	r6, #0
 800447e:	f000 f819 	bl	80044b4 <_init>
 8004482:	4c0a      	ldr	r4, [pc, #40]	; (80044ac <__libc_init_array+0x40>)
 8004484:	4d0a      	ldr	r5, [pc, #40]	; (80044b0 <__libc_init_array+0x44>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	00b3      	lsls	r3, r6, #2
 8004492:	58eb      	ldr	r3, [r5, r3]
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	00b3      	lsls	r3, r6, #2
 800449c:	58eb      	ldr	r3, [r5, r3]
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	08004550 	.word	0x08004550
 80044a8:	08004550 	.word	0x08004550
 80044ac:	08004554 	.word	0x08004554
 80044b0:	08004550 	.word	0x08004550

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
