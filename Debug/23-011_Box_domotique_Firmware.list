
23-011_Box_domotique_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ac  080046ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b4  080046b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080046bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000014  080046d0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080046d0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5b5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002138  00000000  00000000  0002c634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024ac  00000000  00000000  0002f94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2a5  00000000  00000000  00031dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064ebf  00000000  00000000  0003f09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002334  00000000  00000000  000a3f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000a6294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004608 	.word	0x08004608

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004608 	.word	0x08004608

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <CS_Select>:
static bool NRF_isInit_B = false;

extern SPI_HandleTypeDef hspi1;

void CS_Select (void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	0219      	lsls	r1, r3, #8
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2200      	movs	r2, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 faba 	bl	8001a40 <HAL_GPIO_WritePin>
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	0219      	lsls	r1, r3, #8
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 faad 	bl	8001a40 <HAL_GPIO_WritePin>
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <NRF_WriteReg_EN>:



// write a single byte to the particular register
void NRF_WriteReg_EN (uint8_t Reg, uint8_t Data)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2220      	movs	r2, #32
 8000504:	4313      	orrs	r3, r2
 8000506:	b2da      	uxtb	r2, r3
 8000508:	240c      	movs	r4, #12
 800050a:	193b      	adds	r3, r7, r4
 800050c:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	1dba      	adds	r2, r7, #6
 8000512:	7812      	ldrb	r2, [r2, #0]
 8000514:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000516:	f7ff ffcf 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
 800051a:	23fa      	movs	r3, #250	; 0xfa
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	1939      	adds	r1, r7, r4
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <NRF_WriteReg_EN+0x48>)
 8000522:	2202      	movs	r2, #2
 8000524:	f002 f9ff 	bl	8002926 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000528:	f7ff ffd3 	bl	80004d2 <CS_UnSelect>
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b005      	add	sp, #20
 8000532:	bd90      	pop	{r4, r7, pc}
 8000534:	20000044 	.word	0x20000044

08000538 <NRF_WriteReg_ENMulti>:

//write multiple bytes starting from a particular register
void NRF_WriteReg_ENMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	210f      	movs	r1, #15
 8000544:	187b      	adds	r3, r7, r1
 8000546:	1c02      	adds	r2, r0, #0
 8000548:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2220      	movs	r2, #32
 8000550:	4313      	orrs	r3, r2
 8000552:	b2da      	uxtb	r2, r3
 8000554:	2414      	movs	r4, #20
 8000556:	193b      	adds	r3, r7, r4
 8000558:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800055a:	f7ff ffad 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 800055e:	1939      	adds	r1, r7, r4
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <NRF_WriteReg_ENMulti+0x50>)
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	2201      	movs	r2, #1
 8000566:	f002 f9de 	bl	8002926 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	b29a      	uxth	r2, r3
 800056e:	23fa      	movs	r3, #250	; 0xfa
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <NRF_WriteReg_ENMulti+0x50>)
 8000576:	f002 f9d6 	bl	8002926 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800057a:	f7ff ffaa 	bl	80004d2 <CS_UnSelect>
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b007      	add	sp, #28
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000044 	.word	0x20000044

0800058c <nrf24_ReadReg_EN>:


static NRF_ret_val_en nrf24_ReadReg_EN(uint8_t register_REG, uint8_t* read_value_U8P)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
	*read_value_U8P = 0;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	HAL_readSpiValue_EN((uint8_t)register_REG,read_value_U8P,1);
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2201      	movs	r2, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fa7d 	bl	8000aa8 <HAL_readSpiValue_EN>
	return NRF_OK_EN;
 80005ae:	2303      	movs	r3, #3
}
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <nrf24_ReadReg_Multi_EN>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi_EN (uint8_t Reg, uint8_t *data, int size)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	240f      	movs	r4, #15
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	1c02      	adds	r2, r0, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005ca:	f7ff ff75 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 80005ce:	1939      	adds	r1, r7, r4
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <nrf24_ReadReg_Multi_EN+0x40>)
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	f002 f9a6 	bl	8002926 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, size, 1000);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	23fa      	movs	r3, #250	; 0xfa
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	68b9      	ldr	r1, [r7, #8]
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <nrf24_ReadReg_Multi_EN+0x40>)
 80005e6:	f002 fafb 	bl	8002be0 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005ea:	f7ff ff72 	bl	80004d2 <CS_UnSelect>
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b005      	add	sp, #20
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000044 	.word	0x20000044

080005fc <nrfsendCmd_EN>:


// send the command to the NRF
void nrfsendCmd_EN (uint8_t cmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	0002      	movs	r2, r0
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000608:	f7ff ff56 	bl	80004b8 <CS_Select>

	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <nrfsendCmd_EN+0x28>)
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	f002 f987 	bl	8002926 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000618:	f7ff ff5b 	bl	80004d2 <CS_UnSelect>
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000044 	.word	0x20000044

08000628 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	0002      	movs	r2, r0
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b07      	cmp	r3, #7
 800063a:	d104      	bne.n	8000646 <nrf24_reset+0x1e>
	{
		NRF_WriteReg_EN(STATUS, 0x00);
 800063c:	2100      	movs	r1, #0
 800063e:	2007      	movs	r0, #7
 8000640:	f7ff ff54 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P5, 0);
	NRF_WriteReg_EN(FIFO_STATUS, 0x11);
	NRF_WriteReg_EN(DYNPD, 0);
	NRF_WriteReg_EN(FEATURE, 0);
	}
}
 8000644:	e08b      	b.n	800075e <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b17      	cmp	r3, #23
 800064c:	d104      	bne.n	8000658 <nrf24_reset+0x30>
		NRF_WriteReg_EN(FIFO_STATUS, 0x11);
 800064e:	2111      	movs	r1, #17
 8000650:	2017      	movs	r0, #23
 8000652:	f7ff ff4b 	bl	80004ec <NRF_WriteReg_EN>
}
 8000656:	e082      	b.n	800075e <nrf24_reset+0x136>
	NRF_WriteReg_EN(CONFIG, 0x08);
 8000658:	2108      	movs	r1, #8
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff46 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(EN_AA, 0x3F);
 8000660:	213f      	movs	r1, #63	; 0x3f
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff ff42 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(EN_RXADDR, 0x03);
 8000668:	2103      	movs	r1, #3
 800066a:	2002      	movs	r0, #2
 800066c:	f7ff ff3e 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(SETUP_AW, 0x03);
 8000670:	2103      	movs	r1, #3
 8000672:	2003      	movs	r0, #3
 8000674:	f7ff ff3a 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(SETUP_RETR, 0x03);
 8000678:	2103      	movs	r1, #3
 800067a:	2004      	movs	r0, #4
 800067c:	f7ff ff36 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RF_CH, 0x02);
 8000680:	2102      	movs	r1, #2
 8000682:	2005      	movs	r0, #5
 8000684:	f7ff ff32 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RF_SETUP, 0x0E);
 8000688:	210e      	movs	r1, #14
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff2e 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(STATUS, 0x00);
 8000690:	2100      	movs	r1, #0
 8000692:	2007      	movs	r0, #7
 8000694:	f7ff ff2a 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(OBSERVE_TX, 0x00);
 8000698:	2100      	movs	r1, #0
 800069a:	2008      	movs	r0, #8
 800069c:	f7ff ff26 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(CD, 0x00);
 80006a0:	2100      	movs	r1, #0
 80006a2:	2009      	movs	r0, #9
 80006a4:	f7ff ff22 	bl	80004ec <NRF_WriteReg_EN>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006a8:	2018      	movs	r0, #24
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <nrf24_reset+0x140>)
 80006ae:	6811      	ldr	r1, [r2, #0]
 80006b0:	6019      	str	r1, [r3, #0]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	711a      	strb	r2, [r3, #4]
	NRF_WriteReg_ENMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	2205      	movs	r2, #5
 80006ba:	0019      	movs	r1, r3
 80006bc:	200a      	movs	r0, #10
 80006be:	f7ff ff3b 	bl	8000538 <NRF_WriteReg_ENMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006c2:	2010      	movs	r0, #16
 80006c4:	183b      	adds	r3, r7, r0
 80006c6:	4a29      	ldr	r2, [pc, #164]	; (800076c <nrf24_reset+0x144>)
 80006c8:	6811      	ldr	r1, [r2, #0]
 80006ca:	6019      	str	r1, [r3, #0]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	711a      	strb	r2, [r3, #4]
	NRF_WriteReg_ENMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006d0:	183b      	adds	r3, r7, r0
 80006d2:	2205      	movs	r2, #5
 80006d4:	0019      	movs	r1, r3
 80006d6:	200b      	movs	r0, #11
 80006d8:	f7ff ff2e 	bl	8000538 <NRF_WriteReg_ENMulti>
	NRF_WriteReg_EN(RX_ADDR_P2, 0xC3);
 80006dc:	21c3      	movs	r1, #195	; 0xc3
 80006de:	200c      	movs	r0, #12
 80006e0:	f7ff ff04 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_ADDR_P3, 0xC4);
 80006e4:	21c4      	movs	r1, #196	; 0xc4
 80006e6:	200d      	movs	r0, #13
 80006e8:	f7ff ff00 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_ADDR_P4, 0xC5);
 80006ec:	21c5      	movs	r1, #197	; 0xc5
 80006ee:	200e      	movs	r0, #14
 80006f0:	f7ff fefc 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_ADDR_P5, 0xC6);
 80006f4:	21c6      	movs	r1, #198	; 0xc6
 80006f6:	200f      	movs	r0, #15
 80006f8:	f7ff fef8 	bl	80004ec <NRF_WriteReg_EN>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006fc:	2008      	movs	r0, #8
 80006fe:	183b      	adds	r3, r7, r0
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <nrf24_reset+0x140>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6019      	str	r1, [r3, #0]
 8000706:	7912      	ldrb	r2, [r2, #4]
 8000708:	711a      	strb	r2, [r3, #4]
	NRF_WriteReg_ENMulti(TX_ADDR, tx_addr_def, 5);
 800070a:	183b      	adds	r3, r7, r0
 800070c:	2205      	movs	r2, #5
 800070e:	0019      	movs	r1, r3
 8000710:	2010      	movs	r0, #16
 8000712:	f7ff ff11 	bl	8000538 <NRF_WriteReg_ENMulti>
	NRF_WriteReg_EN(RX_PW_P0, 0);
 8000716:	2100      	movs	r1, #0
 8000718:	2011      	movs	r0, #17
 800071a:	f7ff fee7 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P1, 0);
 800071e:	2100      	movs	r1, #0
 8000720:	2012      	movs	r0, #18
 8000722:	f7ff fee3 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P2, 0);
 8000726:	2100      	movs	r1, #0
 8000728:	2013      	movs	r0, #19
 800072a:	f7ff fedf 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P3, 0);
 800072e:	2100      	movs	r1, #0
 8000730:	2014      	movs	r0, #20
 8000732:	f7ff fedb 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P4, 0);
 8000736:	2100      	movs	r1, #0
 8000738:	2015      	movs	r0, #21
 800073a:	f7ff fed7 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(RX_PW_P5, 0);
 800073e:	2100      	movs	r1, #0
 8000740:	2016      	movs	r0, #22
 8000742:	f7ff fed3 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(FIFO_STATUS, 0x11);
 8000746:	2111      	movs	r1, #17
 8000748:	2017      	movs	r0, #23
 800074a:	f7ff fecf 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(DYNPD, 0);
 800074e:	2100      	movs	r1, #0
 8000750:	201c      	movs	r0, #28
 8000752:	f7ff fecb 	bl	80004ec <NRF_WriteReg_EN>
	NRF_WriteReg_EN(FEATURE, 0);
 8000756:	2100      	movs	r1, #0
 8000758:	201d      	movs	r0, #29
 800075a:	f7ff fec7 	bl	80004ec <NRF_WriteReg_EN>
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b008      	add	sp, #32
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	08004620 	.word	0x08004620
 800076c:	08004628 	.word	0x08004628

08000770 <NRF24_Init_EN>:




void NRF24_Init_EN(NRF_HAL_function_str NRF_HAL_function_STR)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	003c      	movs	r4, r7
 8000778:	6020      	str	r0, [r4, #0]
 800077a:	6061      	str	r1, [r4, #4]
 800077c:	60a2      	str	r2, [r4, #8]
 800077e:	60e3      	str	r3, [r4, #12]
	NRF_HAL_function_local_STR.readSpiValue_EN_PF = NRF_HAL_function_STR.readSpiValue_EN_PF;
 8000780:	003b      	movs	r3, r7
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <NRF24_Init_EN+0x94>)
 8000786:	60da      	str	r2, [r3, #12]
	NRF_HAL_function_local_STR.setCe_PF = NRF_HAL_function_STR.setCe_PF;
 8000788:	003b      	movs	r3, r7
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <NRF24_Init_EN+0x94>)
 800078e:	601a      	str	r2, [r3, #0]
	NRF_HAL_function_local_STR.setIrq_PF = NRF_HAL_function_STR.setIrq_PF;
 8000790:	003b      	movs	r3, r7
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <NRF24_Init_EN+0x94>)
 8000796:	605a      	str	r2, [r3, #4]
	NRF_HAL_function_local_STR.writeSpiValue_EN_PF = NRF_HAL_function_STR.writeSpiValue_EN_PF;
 8000798:	003b      	movs	r3, r7
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <NRF24_Init_EN+0x94>)
 800079e:	609a      	str	r2, [r3, #8]

	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <NRF24_Init_EN+0x94>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2000      	movs	r0, #0
 80007a6:	4798      	blx	r3
	CS_UnSelect();
 80007a8:	f7ff fe93 	bl	80004d2 <CS_UnSelect>


	// reset everything
	nrf24_reset (0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff3b 	bl	8000628 <nrf24_reset>

	NRF_WriteReg_EN(CONFIG, 0);  // will be configured later
 80007b2:	2100      	movs	r1, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fe99 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN(EN_AA, 0);  // No Auto ACK
 80007ba:	2100      	movs	r1, #0
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff fe95 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80007c2:	2100      	movs	r1, #0
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff fe91 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007ca:	2103      	movs	r1, #3
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff fe8d 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN (SETUP_RETR, 0);   // No retransmission
 80007d2:	2100      	movs	r1, #0
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff fe89 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN (RF_CH, 0);  // will be setup during Tx or RX
 80007da:	2100      	movs	r1, #0
 80007dc:	2005      	movs	r0, #5
 80007de:	f7ff fe85 	bl	80004ec <NRF_WriteReg_EN>

	NRF_WriteReg_EN (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007e2:	210e      	movs	r1, #14
 80007e4:	2006      	movs	r0, #6
 80007e6:	f7ff fe81 	bl	80004ec <NRF_WriteReg_EN>

	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <NRF24_Init_EN+0x94>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2001      	movs	r0, #1
 80007f0:	4798      	blx	r3
	CS_Select();
 80007f2:	f7ff fe61 	bl	80004b8 <CS_Select>
	NRF_isInit_B = true;
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <NRF24_Init_EN+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b005      	add	sp, #20
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	20000030 	.word	0x20000030
 8000808:	20000040 	.word	0x20000040

0800080c <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	000a      	movs	r2, r1
 8000816:	1cfb      	adds	r3, r7, #3
 8000818:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	NRF_HAL_function_local_STR.setCe_PF(false);
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <NRF24_RxMode+0xac>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2000      	movs	r0, #0
 8000820:	4798      	blx	r3

	nrf24_reset (STATUS);
 8000822:	2007      	movs	r0, #7
 8000824:	f7ff ff00 	bl	8000628 <nrf24_reset>

	NRF_WriteReg_EN (RF_CH, channel);  // select the channel
 8000828:	1cfb      	adds	r3, r7, #3
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	2005      	movs	r0, #5
 8000830:	f7ff fe5c 	bl	80004ec <NRF_WriteReg_EN>

	// select data pipe 2
	uint8_t en_rxaddr = 0;
 8000834:	210f      	movs	r1, #15
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
	nrf24_ReadReg_EN(EN_RXADDR,&en_rxaddr);
 800083c:	000c      	movs	r4, r1
 800083e:	187b      	adds	r3, r7, r1
 8000840:	0019      	movs	r1, r3
 8000842:	2002      	movs	r0, #2
 8000844:	f7ff fea2 	bl	800058c <nrf24_ReadReg_EN>
	en_rxaddr = en_rxaddr | (1<<1);
 8000848:	0021      	movs	r1, r4
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2202      	movs	r2, #2
 8000850:	4313      	orrs	r3, r2
 8000852:	b2da      	uxtb	r2, r3
 8000854:	187b      	adds	r3, r7, r1
 8000856:	701a      	strb	r2, [r3, #0]
	NRF_WriteReg_EN (EN_RXADDR, en_rxaddr);
 8000858:	187b      	adds	r3, r7, r1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	0019      	movs	r1, r3
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fe44 	bl	80004ec <NRF_WriteReg_EN>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	NRF_WriteReg_ENMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2205      	movs	r2, #5
 8000868:	0019      	movs	r1, r3
 800086a:	200b      	movs	r0, #11
 800086c:	f7ff fe64 	bl	8000538 <NRF_WriteReg_ENMulti>
	//NRF_WriteReg_EN(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

	NRF_WriteReg_EN (RX_PW_P1, 32);   // 32 bit payload size for pipe 2
 8000870:	2120      	movs	r1, #32
 8000872:	2012      	movs	r0, #18
 8000874:	f7ff fe3a 	bl	80004ec <NRF_WriteReg_EN>


	// power up the device in Rx mode
	uint8_t config = 0;
 8000878:	210e      	movs	r1, #14
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
	nrf24_ReadReg_EN(CONFIG,&config);
 8000880:	000c      	movs	r4, r1
 8000882:	187b      	adds	r3, r7, r1
 8000884:	0019      	movs	r1, r3
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fe80 	bl	800058c <nrf24_ReadReg_EN>
	config = config | (1<<1) | (1<<0);
 800088c:	0021      	movs	r1, r4
 800088e:	187b      	adds	r3, r7, r1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2203      	movs	r2, #3
 8000894:	4313      	orrs	r3, r2
 8000896:	b2da      	uxtb	r2, r3
 8000898:	187b      	adds	r3, r7, r1
 800089a:	701a      	strb	r2, [r3, #0]
	NRF_WriteReg_EN (CONFIG, config);
 800089c:	187b      	adds	r3, r7, r1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fe22 	bl	80004ec <NRF_WriteReg_EN>

	// Enable the chip after configuring the device
	NRF_HAL_function_local_STR.setCe_PF(true);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <NRF24_RxMode+0xac>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2001      	movs	r0, #1
 80008ae:	4798      	blx	r3
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b005      	add	sp, #20
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	20000030 	.word	0x20000030

080008bc <isDataAvailable_EN>:


NRF_ret_val_en isDataAvailable_EN(int pipenum)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80008c4:	210f      	movs	r1, #15
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
	nrf24_ReadReg_EN(STATUS,&status);
 80008cc:	000c      	movs	r4, r1
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	0019      	movs	r1, r3
 80008d2:	2007      	movs	r0, #7
 80008d4:	f7ff fe5a 	bl	800058c <nrf24_ReadReg_EN>

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80008d8:	0021      	movs	r1, r4
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001a      	movs	r2, r3
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	4013      	ands	r3, r2
 80008e4:	d00c      	beq.n	8000900 <isDataAvailable_EN+0x44>
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	d005      	beq.n	8000900 <isDataAvailable_EN+0x44>
	{

		NRF_WriteReg_EN(STATUS, (1<<6));
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff fdf8 	bl	80004ec <NRF_WriteReg_EN>

		return NRF_DATA_AVAILABLE_EN;
 80008fc:	2304      	movs	r3, #4
 80008fe:	e000      	b.n	8000902 <isDataAvailable_EN+0x46>
	}

	return NRF_DATA_NOT_AVAILABLE_EN;
 8000900:	2305      	movs	r3, #5
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bd90      	pop	{r4, r7, pc}

0800090a <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 800090a:	b590      	push	{r4, r7, lr}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000912:	240f      	movs	r4, #15
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	// payload command
	HAL_readSpiValue_EN(R_RX_PAYLOAD,data,32);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2220      	movs	r2, #32
 800091e:	0019      	movs	r1, r3
 8000920:	2061      	movs	r0, #97	; 0x61
 8000922:	f000 f8c1 	bl	8000aa8 <HAL_readSpiValue_EN>

	HAL_delay_ms(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 f90c 	bl	8000b44 <HAL_delay_ms>

	cmdtosend = FLUSH_RX;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	22e2      	movs	r2, #226	; 0xe2
 8000930:	701a      	strb	r2, [r3, #0]
	nrfsendCmd_EN(cmdtosend);
 8000932:	193b      	adds	r3, r7, r4
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe60 	bl	80005fc <nrfsendCmd_EN>
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b005      	add	sp, #20
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e00a      	b.n	8000968 <NRF24_ReadAll+0x24>
	{
		nrf24_ReadReg_EN(i,(uint8_t*)(data+i));
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	18d3      	adds	r3, r2, r3
 800095c:	0019      	movs	r1, r3
 800095e:	f7ff fe15 	bl	800058c <nrf24_ReadReg_EN>
	for (int i=0; i<10; i++)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b09      	cmp	r3, #9
 800096c:	ddf1      	ble.n	8000952 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi_EN(RX_ADDR_P0, (data+10), 5);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	330a      	adds	r3, #10
 8000972:	2205      	movs	r2, #5
 8000974:	0019      	movs	r1, r3
 8000976:	200a      	movs	r0, #10
 8000978:	f7ff fe1e 	bl	80005b8 <nrf24_ReadReg_Multi_EN>

	nrf24_ReadReg_Multi_EN(RX_ADDR_P1, (data+15), 5);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	330f      	adds	r3, #15
 8000980:	2205      	movs	r2, #5
 8000982:	0019      	movs	r1, r3
 8000984:	200b      	movs	r0, #11
 8000986:	f7ff fe17 	bl	80005b8 <nrf24_ReadReg_Multi_EN>

	nrf24_ReadReg_EN(RX_ADDR_P2,(uint8_t*)(data+20));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3314      	adds	r3, #20
 800098e:	0019      	movs	r1, r3
 8000990:	200c      	movs	r0, #12
 8000992:	f7ff fdfb 	bl	800058c <nrf24_ReadReg_EN>
	nrf24_ReadReg_EN(RX_ADDR_P3,(uint8_t*)(data+21));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3315      	adds	r3, #21
 800099a:	0019      	movs	r1, r3
 800099c:	200d      	movs	r0, #13
 800099e:	f7ff fdf5 	bl	800058c <nrf24_ReadReg_EN>
	nrf24_ReadReg_EN(RX_ADDR_P4,(uint8_t*)(data+22));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3316      	adds	r3, #22
 80009a6:	0019      	movs	r1, r3
 80009a8:	200e      	movs	r0, #14
 80009aa:	f7ff fdef 	bl	800058c <nrf24_ReadReg_EN>
	nrf24_ReadReg_EN(RX_ADDR_P5,(uint8_t*)(data+23));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3317      	adds	r3, #23
 80009b2:	0019      	movs	r1, r3
 80009b4:	200f      	movs	r0, #15
 80009b6:	f7ff fde9 	bl	800058c <nrf24_ReadReg_EN>

	nrf24_ReadReg_Multi_EN(RX_ADDR_P0, (data+24), 5);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3318      	adds	r3, #24
 80009be:	2205      	movs	r2, #5
 80009c0:	0019      	movs	r1, r3
 80009c2:	200a      	movs	r0, #10
 80009c4:	f7ff fdf8 	bl	80005b8 <nrf24_ReadReg_Multi_EN>

	for (int i=29; i<38; i++)
 80009c8:	231d      	movs	r3, #29
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	e00c      	b.n	80009e8 <NRF24_ReadAll+0xa4>
	{
		nrf24_ReadReg_EN(i-12,(uint8_t*)(data+i));
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3b0c      	subs	r3, #12
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	0019      	movs	r1, r3
 80009de:	f7ff fdd5 	bl	800058c <nrf24_ReadReg_EN>
	for (int i=29; i<38; i++)
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2b25      	cmp	r3, #37	; 0x25
 80009ec:	ddef      	ble.n	80009ce <NRF24_ReadAll+0x8a>
	}

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b004      	add	sp, #16
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_setCE>:
	HAL_spiIsInit = true;
	SPI_init();
}

inline void HAL_setCE(bool state_B)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, CE_Pin, state_B);
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <HAL_setCE+0x24>)
 8000a0e:	0019      	movs	r1, r3
 8000a10:	f001 f816 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	50000400 	.word	0x50000400

08000a20 <HAL_setIRQ>:

inline void HAL_setIRQ(bool state_B)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, IRQ_Pin, state_B);
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <HAL_setIRQ+0x24>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	f001 f802 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	50000400 	.word	0x50000400

08000a48 <HAL_writeSpiValue_EN>:

HAL_ret_val_en HAL_writeSpiValue_EN(uint8_t* value_U8A, uint16_t size_value_U16)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	000a      	movs	r2, r1
 8000a52:	1cbb      	adds	r3, r7, #2
 8000a54:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	0219      	lsls	r1, r3, #8
 8000a5a:	23a0      	movs	r3, #160	; 0xa0
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	2200      	movs	r2, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 ffed 	bl	8001a40 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, value_U8A, size_value_U16, 100);
 8000a66:	250f      	movs	r5, #15
 8000a68:	197c      	adds	r4, r7, r5
 8000a6a:	1cbb      	adds	r3, r7, #2
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <HAL_writeSpiValue_EN+0x5c>)
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	f001 ff57 	bl	8002926 <HAL_SPI_Transmit>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	0219      	lsls	r1, r3, #8
 8000a80:	23a0      	movs	r3, #160	; 0xa0
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2201      	movs	r2, #1
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 ffda 	bl	8001a40 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 8000a8c:	197b      	adds	r3, r7, r5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_writeSpiValue_EN+0x50>
	{
		return SPI_WRITE_ERROR_EN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	e000      	b.n	8000a9a <HAL_writeSpiValue_EN+0x52>
	}
	else
	{
		return SPI_WRITE_OK_EN;
 8000a98:	2303      	movs	r3, #3
	}
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000044 	.word	0x20000044

08000aa8 <HAL_readSpiValue_EN>:

HAL_ret_val_en HAL_readSpiValue_EN(uint8_t reg_U8, uint8_t* read_value_U8A,uint16_t size_read_value_U16)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6039      	str	r1, [r7, #0]
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	1c02      	adds	r2, r0, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	1c0a      	adds	r2, r1, #0
 8000abc:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret_val;
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	0219      	lsls	r1, r3, #8
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 ffb9 	bl	8001a40 <HAL_GPIO_WritePin>
	ret_val = HAL_SPI_Transmit(&hspi1, &reg_U8, 1, 100);
 8000ace:	250f      	movs	r5, #15
 8000ad0:	197c      	adds	r4, r7, r5
 8000ad2:	1df9      	adds	r1, r7, #7
 8000ad4:	481a      	ldr	r0, [pc, #104]	; (8000b40 <HAL_readSpiValue_EN+0x98>)
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f001 ff24 	bl	8002926 <HAL_SPI_Transmit>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	if (ret_val != HAL_OK)
 8000ae2:	197b      	adds	r3, r7, r5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d009      	beq.n	8000afe <HAL_readSpiValue_EN+0x56>
	{
		HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	0219      	lsls	r1, r3, #8
 8000aee:	23a0      	movs	r3, #160	; 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2201      	movs	r2, #1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 ffa3 	bl	8001a40 <HAL_GPIO_WritePin>
		return SPI_READ_ERROR_EN;
 8000afa:	2304      	movs	r3, #4
 8000afc:	e01b      	b.n	8000b36 <HAL_readSpiValue_EN+0x8e>
	}
	ret_val = HAL_SPI_Receive(&hspi1, read_value_U8A, size_read_value_U16+1, 100);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	250f      	movs	r5, #15
 8000b08:	197c      	adds	r4, r7, r5
 8000b0a:	6839      	ldr	r1, [r7, #0]
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <HAL_readSpiValue_EN+0x98>)
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	f002 f866 	bl	8002be0 <HAL_SPI_Receive>
 8000b14:	0003      	movs	r3, r0
 8000b16:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0219      	lsls	r1, r3, #8
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2201      	movs	r2, #1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 ff8c 	bl	8001a40 <HAL_GPIO_WritePin>
	if (ret_val != HAL_OK)
 8000b28:	197b      	adds	r3, r7, r5
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_readSpiValue_EN+0x8c>
	{
		return SPI_READ_ERROR_EN;
 8000b30:	2304      	movs	r3, #4
 8000b32:	e000      	b.n	8000b36 <HAL_readSpiValue_EN+0x8e>
	}
	else
	{
		return SPI_READ_OK_EN;
 8000b34:	2305      	movs	r3, #5
	}
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000044 	.word	0x20000044

08000b44 <HAL_delay_ms>:

inline void HAL_delay_ms(uint32_t time_ms_U32)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_ms_U32);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fb58 	bl	8001204 <HAL_Delay>
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fae0 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f83a 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 f92a 	bl	8000dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 f90a 	bl	8000d84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b70:	f000 f8d8 	bl	8000d24 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b74:	f000 f89e 	bl	8000cb4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init_EN(NRF_HAL_function_local_STR);
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <main+0x6c>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	6859      	ldr	r1, [r3, #4]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f7ff fdf5 	bl	8000770 <NRF24_Init_EN>

#ifdef RX_MODE
  NRF24_RxMode(RxAddress, 10);
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <main+0x70>)
 8000b88:	210a      	movs	r1, #10
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fe3e 	bl	800080c <NRF24_RxMode>
#else
  NRF24_TxMode(TxAddress, 10);
#endif
  NRF24_ReadAll(data);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <main+0x74>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fed6 	bl	8000944 <NRF24_ReadAll>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef RX_MODE
	  if (isDataAvailable_EN(1) == NRF_DATA_AVAILABLE_EN)
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fe8f 	bl	80008bc <isDataAvailable_EN>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d1f9      	bne.n	8000b98 <main+0x3c>
	  {
		  NRF24_Receive(RxData);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <main+0x78>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff feaf 	bl	800090a <NRF24_Receive>
		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <main+0x78>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff faaa 	bl	8000108 <strlen>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	23fa      	movs	r3, #250	; 0xfa
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <main+0x78>)
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x7c>)
 8000bc0:	f002 fc9a 	bl	80034f8 <HAL_UART_Transmit>
	  if (isDataAvailable_EN(1) == NRF_DATA_AVAILABLE_EN)
 8000bc4:	e7e8      	b.n	8000b98 <main+0x3c>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	08004630 	.word	0x08004630
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	2000018c 	.word	0x2000018c
 8000bd4:	2000016c 	.word	0x2000016c
 8000bd8:	2000009c 	.word	0x2000009c

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b099      	sub	sp, #100	; 0x64
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	242c      	movs	r4, #44	; 0x2c
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0018      	movs	r0, r3
 8000be8:	2334      	movs	r3, #52	; 0x34
 8000bea:	001a      	movs	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f003 fcdf 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf2:	2318      	movs	r3, #24
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	2314      	movs	r3, #20
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f003 fcd7 	bl	80045b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c02:	003b      	movs	r3, r7
 8000c04:	0018      	movs	r0, r3
 8000c06:	2318      	movs	r3, #24
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f003 fcd0 	bl	80045b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SystemClock_Config+0xd0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <SystemClock_Config+0xd4>)
 8000c16:	401a      	ands	r2, r3
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <SystemClock_Config+0xd0>)
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	0109      	lsls	r1, r1, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c22:	0021      	movs	r1, r4
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2210      	movs	r2, #16
 8000c28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	22a0      	movs	r2, #160	; 0xa0
 8000c3a:	0212      	lsls	r2, r2, #8
 8000c3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 ff18 	bl	8001a7c <HAL_RCC_OscConfig>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c50:	f000 f918 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	2118      	movs	r1, #24
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	220f      	movs	r2, #15
 8000c5a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 fa7b 	bl	8002174 <HAL_RCC_ClockConfig>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c82:	f000 f8ff 	bl	8000e84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c86:	003b      	movs	r3, r7
 8000c88:	2202      	movs	r2, #2
 8000c8a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	003b      	movs	r3, r7
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fc91 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c9e:	f000 f8f1 	bl	8000e84 <Error_Handler>
  }
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b019      	add	sp, #100	; 0x64
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40007000 	.word	0x40007000
 8000cb0:	ffffe7ff 	.word	0xffffe7ff

08000cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <MX_SPI1_Init+0x6c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cc0:	2282      	movs	r2, #130	; 0x82
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <MX_SPI1_Init+0x68>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fd84 	bl	8002814 <HAL_SPI_Init>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d10:	f000 f8b8 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000044 	.word	0x20000044
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_USART2_UART_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d30:	22e1      	movs	r2, #225	; 0xe1
 8000d32:	0252      	lsls	r2, r2, #9
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fb71 	bl	8003450 <HAL_UART_Init>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f887 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_DMA_Init+0x38>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	200b      	movs	r0, #11
 8000da8:	f000 fafc 	bl	80013a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000dac:	200b      	movs	r0, #11
 8000dae:	f000 fb0e 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	240c      	movs	r4, #12
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2314      	movs	r3, #20
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f003 fbed 	bl	80045b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	2201      	movs	r2, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000df4:	2102      	movs	r1, #2
 8000df6:	430a      	orrs	r2, r1
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_GPIO_Init+0xbc>)
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4013      	ands	r3, r2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	0219      	lsls	r1, r3, #8
 8000e0a:	23a0      	movs	r3, #160	; 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	2200      	movs	r2, #0
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fe15 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IRQ_Pin|CE_Pin, GPIO_PIN_RESET);
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4819      	ldr	r0, [pc, #100]	; (8000e80 <MX_GPIO_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	0019      	movs	r1, r3
 8000e20:	f000 fe0e 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0212      	lsls	r2, r2, #8
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	193a      	adds	r2, r7, r4
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 fc8c 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin CE_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin|CE_Pin;
 8000e4c:	0021      	movs	r1, r4
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	22c0      	movs	r2, #192	; 0xc0
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <MX_GPIO_Init+0xc0>)
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	0010      	movs	r0, r2
 8000e70:	f000 fc78 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b009      	add	sp, #36	; 0x24
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	50000400 	.word	0x50000400

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_MspInit+0x24>)
 8000e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x24>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_MspInit+0x24>)
 8000ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_MspInit+0x24>)
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	0549      	lsls	r1, r1, #21
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	240c      	movs	r4, #12
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	001a      	movs	r2, r3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	f003 fb70 	bl	80045b0 <memset>
  if(hspi->Instance==SPI1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_SPI_MspInit+0x7c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d128      	bne.n	8000f2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_SPI_MspInit+0x80>)
 8000edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_SPI_MspInit+0x80>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0149      	lsls	r1, r1, #5
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_SPI_MspInit+0x80>)
 8000eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_SPI_MspInit+0x80>)
 8000eee:	2102      	movs	r1, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_SPI_MspInit+0x80>)
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f00:	0021      	movs	r1, r4
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2238      	movs	r2, #56	; 0x38
 8000f06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2203      	movs	r2, #3
 8000f18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_SPI_MspInit+0x84>)
 8000f24:	0019      	movs	r1, r3
 8000f26:	0010      	movs	r0, r2
 8000f28:	f000 fc1c 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b009      	add	sp, #36	; 0x24
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	40013000 	.word	0x40013000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	50000400 	.word	0x50000400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	240c      	movs	r4, #12
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2314      	movs	r3, #20
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f003 fb2c 	bl	80045b0 <memset>
  if(huart->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a31      	ldr	r2, [pc, #196]	; (8001024 <HAL_UART_MspInit+0xe4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d15b      	bne.n	800101a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_UART_MspInit+0xe8>)
 8000f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_UART_MspInit+0xe8>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0289      	lsls	r1, r1, #10
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_UART_MspInit+0xe8>)
 8000f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_UART_MspInit+0xe8>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_UART_MspInit+0xe8>)
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	22c0      	movs	r2, #192	; 0xc0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	0021      	movs	r1, r4
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2202      	movs	r2, #2
 8000f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	187a      	adds	r2, r7, r1
 8000fac:	23a0      	movs	r3, #160	; 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fbd6 	bl	8001764 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_UART_MspInit+0xf0>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_UART_MspInit+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_UART_MspInit+0xec>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 fa09 	bl	8001408 <HAL_DMA_Init>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ffa:	f7ff ff43 	bl	8000e84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_UART_MspInit+0xec>)
 8001002:	675a      	str	r2, [r3, #116]	; 0x74
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_UART_MspInit+0xec>)
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	201c      	movs	r0, #28
 8001010:	f000 f9c8 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001014:	201c      	movs	r0, #28
 8001016:	f000 f9da 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b009      	add	sp, #36	; 0x24
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40004400 	.word	0x40004400
 8001028:	40021000 	.word	0x40021000
 800102c:	20000124 	.word	0x20000124
 8001030:	40020058 	.word	0x40020058

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f8b8 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800106a:	0018      	movs	r0, r3
 800106c:	f000 facb 	bl	8001606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000124 	.word	0x20000124

0800107c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <USART2_IRQHandler+0x14>)
 8001082:	0018      	movs	r0, r3
 8001084:	f002 fad8 	bl	8003638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	2000009c 	.word	0x2000009c

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010a2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a4:	f7ff fff6 	bl	8001094 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80010aa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010ac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <LoopForever+0xa>)
    CMP R1, R2
 80010b0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010b2:	d105      	bne.n	80010c0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010b6:	4912      	ldr	r1, [pc, #72]	; (8001100 <LoopForever+0x12>)
    STR R1, [R0]
 80010b8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <LoopForever+0x1a>)
    STR R1, [R0]
 80010be:	6001      	str	r1, [r0, #0]

080010c0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010c2:	4913      	ldr	r1, [pc, #76]	; (8001110 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <LoopForever+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80010d8:	4c10      	ldr	r4, [pc, #64]	; (800111c <LoopForever+0x2e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 fa6b 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fd37 	bl	8000b5c <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
   ldr   r0, =_estack
 80010f0:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 80010f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80010f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80010fc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001100:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001104:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001108:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001114:	080046bc 	.word	0x080046bc
  ldr r2, =_sbss
 8001118:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800111c:	200001c4 	.word	0x200001c4

08001120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_IRQHandler>
	...

08001124 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Init+0x3c>)
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f811 	bl	8001164 <HAL_InitTick>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d003      	beq.n	800114e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e001      	b.n	8001152 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114e:	f7ff fe9f 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
}
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_InitTick+0x5c>)
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0x60>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0019      	movs	r1, r3
 8001176:	23fa      	movs	r3, #250	; 0xfa
 8001178:	0098      	lsls	r0, r3, #2
 800117a:	f7fe ffcd 	bl	8000118 <__udivsi3>
 800117e:	0003      	movs	r3, r0
 8001180:	0019      	movs	r1, r3
 8001182:	0020      	movs	r0, r4
 8001184:	f7fe ffc8 	bl	8000118 <__udivsi3>
 8001188:	0003      	movs	r3, r0
 800118a:	0018      	movs	r0, r3
 800118c:	f000 f92f 	bl	80013ee <HAL_SYSTICK_Config>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d001      	beq.n	8001198 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e00f      	b.n	80011b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d80b      	bhi.n	80011b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2301      	movs	r3, #1
 80011a2:	425b      	negs	r3, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 f8fc 	bl	80013a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_InitTick+0x64>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b003      	add	sp, #12
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000010 	.word	0x20000010
 80011c8:	2000000c 	.word	0x2000000c

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x1c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	001a      	movs	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x20>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	18d2      	adds	r2, r2, r3
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_IncTick+0x20>)
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000010 	.word	0x20000010
 80011ec:	200001c0 	.word	0x200001c0

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_GetTick+0x10>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	200001c0 	.word	0x200001c0

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fff0 	bl	80011f0 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	001a      	movs	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	189b      	adds	r3, r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	f7ff ffe0 	bl	80011f0 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	20000010 	.word	0x20000010

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	0002      	movs	r2, r0
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b7f      	cmp	r3, #127	; 0x7f
 800125e:	d809      	bhi.n	8001274 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	231f      	movs	r3, #31
 8001268:	401a      	ands	r2, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_EnableIRQ+0x30>)
 800126c:	2101      	movs	r1, #1
 800126e:	4091      	lsls	r1, r2
 8001270:	000a      	movs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
  }
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	0002      	movs	r2, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b7f      	cmp	r3, #127	; 0x7f
 8001294:	d828      	bhi.n	80012e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <__NVIC_SetPriority+0xd4>)
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	33c0      	adds	r3, #192	; 0xc0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	589b      	ldr	r3, [r3, r2]
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	0011      	movs	r1, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	400a      	ands	r2, r1
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	21ff      	movs	r1, #255	; 0xff
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	401a      	ands	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	4003      	ands	r3, r0
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d4:	481f      	ldr	r0, [pc, #124]	; (8001354 <__NVIC_SetPriority+0xd4>)
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	430a      	orrs	r2, r1
 80012e0:	33c0      	adds	r3, #192	; 0xc0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012e6:	e031      	b.n	800134c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0019      	movs	r1, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	400b      	ands	r3, r1
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3306      	adds	r3, #6
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1dfa      	adds	r2, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	2203      	movs	r2, #3
 800130a:	400a      	ands	r2, r1
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	401a      	ands	r2, r3
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	2303      	movs	r3, #3
 800132a:	4003      	ands	r3, r0
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <__NVIC_SetPriority+0xd8>)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	001c      	movs	r4, r3
 8001338:	230f      	movs	r3, #15
 800133a:	4023      	ands	r3, r4
 800133c:	3b08      	subs	r3, #8
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	430a      	orrs	r2, r1
 8001342:	3306      	adds	r3, #6
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	18c3      	adds	r3, r0, r3
 8001348:	3304      	adds	r3, #4
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b003      	add	sp, #12
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	045b      	lsls	r3, r3, #17
 800136c:	429a      	cmp	r2, r3
 800136e:	d301      	bcc.n	8001374 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001370:	2301      	movs	r3, #1
 8001372:	e010      	b.n	8001396 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SysTick_Config+0x44>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	3a01      	subs	r2, #1
 800137a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137c:	2301      	movs	r3, #1
 800137e:	425b      	negs	r3, r3
 8001380:	2103      	movs	r1, #3
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff ff7c 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x44>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x44>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	210f      	movs	r1, #15
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	1c02      	adds	r2, r0, #0
 80013b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	0002      	movs	r2, r0
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff33 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ffaf 	bl	800135c <SysTick_Config>
 80013fe:	0003      	movs	r3, r0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e061      	b.n	80014de <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_DMA_Init+0xe0>)
 8001420:	4694      	mov	ip, r2
 8001422:	4463      	add	r3, ip
 8001424:	2114      	movs	r1, #20
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe fe76 	bl	8000118 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	009a      	lsls	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a2d      	ldr	r2, [pc, #180]	; (80014ec <HAL_DMA_Init+0xe4>)
 8001438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2225      	movs	r2, #37	; 0x25
 800143e:	2102      	movs	r1, #2
 8001440:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <HAL_DMA_Init+0xe8>)
 800144e:	4013      	ands	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	01db      	lsls	r3, r3, #7
 8001490:	429a      	cmp	r2, r3
 8001492:	d018      	beq.n	80014c6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_DMA_Init+0xec>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	211c      	movs	r1, #28
 800149e:	400b      	ands	r3, r1
 80014a0:	210f      	movs	r1, #15
 80014a2:	4099      	lsls	r1, r3
 80014a4:	000b      	movs	r3, r1
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_DMA_Init+0xec>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_DMA_Init+0xec>)
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	201c      	movs	r0, #28
 80014bc:	4003      	ands	r3, r0
 80014be:	409a      	lsls	r2, r3
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_DMA_Init+0xec>)
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2225      	movs	r2, #37	; 0x25
 80014d0:	2101      	movs	r1, #1
 80014d2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	bffdfff8 	.word	0xbffdfff8
 80014ec:	40020000 	.word	0x40020000
 80014f0:	ffff800f 	.word	0xffff800f
 80014f4:	400200a8 	.word	0x400200a8

080014f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001500:	230f      	movs	r3, #15
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2225      	movs	r2, #37	; 0x25
 800150c:	5c9b      	ldrb	r3, [r3, r2]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2224      	movs	r2, #36	; 0x24
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e024      	b.n	8001570 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	210e      	movs	r1, #14
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	438a      	bics	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	221c      	movs	r2, #28
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2225      	movs	r2, #37	; 0x25
 800155e:	2101      	movs	r1, #1
 8001560:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2224      	movs	r2, #36	; 0x24
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]

    return status;
 800156a:	230f      	movs	r3, #15
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	210f      	movs	r1, #15
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2225      	movs	r2, #37	; 0x25
 800158c:	5c9b      	ldrb	r3, [r3, r2]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d006      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e02a      	b.n	80015f8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	210e      	movs	r1, #14
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	221c      	movs	r2, #28
 80015c8:	401a      	ands	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2101      	movs	r1, #1
 80015d0:	4091      	lsls	r1, r2
 80015d2:	000a      	movs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2225      	movs	r2, #37	; 0x25
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2224      	movs	r2, #36	; 0x24
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	0010      	movs	r0, r2
 80015f6:	4798      	blx	r3
    }
  }
  return status;
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	221c      	movs	r2, #28
 8001624:	4013      	ands	r3, r2
 8001626:	2204      	movs	r2, #4
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	d026      	beq.n	8001680 <HAL_DMA_IRQHandler+0x7a>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d022      	beq.n	8001680 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2220      	movs	r2, #32
 8001642:	4013      	ands	r3, r2
 8001644:	d107      	bne.n	8001656 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2104      	movs	r1, #4
 8001652:	438a      	bics	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	221c      	movs	r2, #28
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2104      	movs	r1, #4
 8001664:	4091      	lsls	r1, r2
 8001666:	000a      	movs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	2b00      	cmp	r3, #0
 8001670:	d100      	bne.n	8001674 <HAL_DMA_IRQHandler+0x6e>
 8001672:	e071      	b.n	8001758 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	0010      	movs	r0, r2
 800167c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800167e:	e06b      	b.n	8001758 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	221c      	movs	r2, #28
 8001686:	4013      	ands	r3, r2
 8001688:	2202      	movs	r2, #2
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	d02d      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xea>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d029      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	4013      	ands	r3, r2
 80016a6:	d10b      	bne.n	80016c0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	210a      	movs	r1, #10
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2225      	movs	r2, #37	; 0x25
 80016bc:	2101      	movs	r1, #1
 80016be:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	221c      	movs	r2, #28
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2102      	movs	r1, #2
 80016ce:	4091      	lsls	r1, r2
 80016d0:	000a      	movs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d039      	beq.n	8001758 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	0010      	movs	r0, r2
 80016ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ee:	e033      	b.n	8001758 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	221c      	movs	r2, #28
 80016f6:	4013      	ands	r3, r2
 80016f8:	2208      	movs	r2, #8
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	d02a      	beq.n	800175a <HAL_DMA_IRQHandler+0x154>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2208      	movs	r2, #8
 8001708:	4013      	ands	r3, r2
 800170a:	d026      	beq.n	800175a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	210e      	movs	r1, #14
 8001718:	438a      	bics	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	221c      	movs	r2, #28
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2101      	movs	r1, #1
 800172a:	4091      	lsls	r1, r2
 800172c:	000a      	movs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2225      	movs	r2, #37	; 0x25
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2224      	movs	r2, #36	; 0x24
 8001742:	2100      	movs	r1, #0
 8001744:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	0010      	movs	r0, r2
 8001756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46c0      	nop			; (mov r8, r8)
}
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800177a:	e149      	b.n	8001a10 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4091      	lsls	r1, r2
 8001786:	000a      	movs	r2, r1
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d100      	bne.n	8001794 <HAL_GPIO_Init+0x30>
 8001792:	e13a      	b.n	8001a0a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	2b01      	cmp	r3, #1
 800179e:	d005      	beq.n	80017ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	2201      	movs	r2, #1
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b03      	cmp	r3, #3
 8001818:	d017      	beq.n	800184a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	4013      	ands	r3, r2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d123      	bne.n	800189e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	58d3      	ldr	r3, [r2, r3]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2207      	movs	r2, #7
 8001868:	4013      	ands	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2107      	movs	r1, #7
 8001882:	400b      	ands	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	6939      	ldr	r1, [r7, #16]
 800189c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	401a      	ands	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_GPIO_Init+0x17c>
 80018de:	e094      	b.n	8001a0a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <HAL_GPIO_Init+0x2c4>)
 80018e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_GPIO_Init+0x2c4>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ec:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x2c8>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	589b      	ldr	r3, [r3, r2]
 80018f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	429a      	cmp	r2, r3
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x1de>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a44      	ldr	r2, [pc, #272]	; (8001a30 <HAL_GPIO_Init+0x2cc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x1da>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a43      	ldr	r2, [pc, #268]	; (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x1d6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a42      	ldr	r2, [pc, #264]	; (8001a38 <HAL_GPIO_Init+0x2d4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x1d2>
 8001932:	2305      	movs	r3, #5
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001936:	2306      	movs	r3, #6
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x1e0>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x1e0>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001942:	2300      	movs	r3, #0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2103      	movs	r1, #3
 8001948:	400a      	ands	r2, r1
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	; (8001a2c <HAL_GPIO_Init+0x2c8>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	029b      	lsls	r3, r3, #10
 80019ce:	4013      	ands	r3, r2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	4013      	ands	r3, r2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_GPIO_Init+0x2d8>)
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	40da      	lsrs	r2, r3
 8001a18:	1e13      	subs	r3, r2, #0
 8001a1a:	d000      	beq.n	8001a1e <HAL_GPIO_Init+0x2ba>
 8001a1c:	e6ae      	b.n	800177c <HAL_GPIO_Init+0x18>
  }
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	50000400 	.word	0x50000400
 8001a34:	50000800 	.word	0x50000800
 8001a38:	50001c00 	.word	0x50001c00
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	0008      	movs	r0, r1
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	1c0a      	adds	r2, r1, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	1c7b      	adds	r3, r7, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a6a:	1cbb      	adds	r3, r7, #2
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 fb6c 	bl	8002168 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a90:	4bc8      	ldr	r3, [pc, #800]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9a:	4bc6      	ldr	r3, [pc, #792]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x36>
 8001ab0:	e07d      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d007      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d112      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x68>
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4bba      	ldr	r3, [pc, #744]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5a>
 8001ad4:	e06a      	b.n	8001bac <HAL_RCC_OscConfig+0x130>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d166      	bne.n	8001bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 fb42 	bl	8002168 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x84>
 8001af0:	4bb0      	ldr	r3, [pc, #704]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4baf      	ldr	r3, [pc, #700]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0249      	lsls	r1, r1, #9
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e027      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	23a0      	movs	r3, #160	; 0xa0
 8001b06:	02db      	lsls	r3, r3, #11
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0xae>
 8001b0c:	4ba9      	ldr	r3, [pc, #676]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4ba8      	ldr	r3, [pc, #672]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	02c9      	lsls	r1, r1, #11
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4ba6      	ldr	r3, [pc, #664]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4ba5      	ldr	r3, [pc, #660]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0249      	lsls	r1, r1, #9
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e012      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	4ba2      	ldr	r3, [pc, #648]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4ba1      	ldr	r3, [pc, #644]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b30:	49a1      	ldr	r1, [pc, #644]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4b9f      	ldr	r3, [pc, #636]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b9a      	ldr	r3, [pc, #616]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	499c      	ldr	r1, [pc, #624]	; (8001dbc <HAL_RCC_OscConfig+0x340>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d014      	beq.n	8001b82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb4a 	bl	80011f0 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b62:	f7ff fb45 	bl	80011f0 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e2f9      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b74:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0xe6>
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb35 	bl	80011f0 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fb30 	bl	80011f0 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e2e4      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x110>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x13e>
 8001bb8:	e099      	b.n	8001cee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001bce:	2120      	movs	r1, #32
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	4393      	bics	r3, r2
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d13e      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1ea>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d13b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_RCC_OscConfig+0x186>
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2b2      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x344>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	021a      	lsls	r2, r3, #8
 8001c12:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 fbeb 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8001c2e:	0001      	movs	r1, r0
 8001c30:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	220f      	movs	r2, #15
 8001c38:	4013      	ands	r3, r2
 8001c3a:	4a62      	ldr	r2, [pc, #392]	; (8001dc4 <HAL_RCC_OscConfig+0x348>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	000a      	movs	r2, r1
 8001c40:	40da      	lsrs	r2, r3
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x34c>)
 8001c44:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c46:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCC_OscConfig+0x350>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2513      	movs	r5, #19
 8001c4c:	197c      	adds	r4, r7, r5
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff fa88 	bl	8001164 <HAL_InitTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d046      	beq.n	8001cee <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c60:	197b      	adds	r3, r7, r5
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	e280      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d027      	beq.n	8001cbc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c6c:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2209      	movs	r2, #9
 8001c72:	4393      	bics	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fab7 	bl	80011f0 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fab2 	bl	80011f0 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e266      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f1      	beq.n	8001c88 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_RCC_OscConfig+0x344>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	021a      	lsls	r2, r3, #8
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e018      	b.n	8001cee <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fa92 	bl	80011f0 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fa8d 	bl	80011f0 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e241      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1f1      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCC_OscConfig+0x27e>
 8001cf8:	e0a1      	b.n	8001e3e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d140      	bne.n	8001d82 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d00:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_OscConfig+0x29c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e227      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x354>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	0a19      	lsrs	r1, r3, #8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	061a      	lsls	r2, r3, #24
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	0b5b      	lsrs	r3, r3, #13
 8001d46:	3301      	adds	r3, #1
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	0212      	lsls	r2, r2, #8
 8001d4c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	210f      	movs	r1, #15
 8001d56:	400b      	ands	r3, r1
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <HAL_RCC_OscConfig+0x348>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_RCC_OscConfig+0x34c>)
 8001d60:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x350>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2513      	movs	r5, #19
 8001d68:	197c      	adds	r4, r7, r5
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7ff f9fa 	bl	8001164 <HAL_InitTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d74:	197b      	adds	r3, r7, r5
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d060      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001d7c:	197b      	adds	r3, r7, r5
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	e1f2      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03f      	beq.n	8001e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x338>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0049      	lsls	r1, r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa2a 	bl	80011f0 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da0:	e018      	b.n	8001dd4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa25 	bl	80011f0 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d911      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1d9      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	fffeffff 	.word	0xfffeffff
 8001dbc:	fffbffff 	.word	0xfffbffff
 8001dc0:	ffffe0ff 	.word	0xffffe0ff
 8001dc4:	08004640 	.word	0x08004640
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dd4:	4bc9      	ldr	r3, [pc, #804]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0e0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de0:	4bc6      	ldr	r3, [pc, #792]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4ac6      	ldr	r2, [pc, #792]	; (8002100 <HAL_RCC_OscConfig+0x684>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4bc3      	ldr	r3, [pc, #780]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df4:	4bc1      	ldr	r3, [pc, #772]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	0a19      	lsrs	r1, r3, #8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	061a      	lsls	r2, r3, #24
 8001e02:	4bbe      	ldr	r3, [pc, #760]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	e019      	b.n	8001e3e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0a:	4bbc      	ldr	r3, [pc, #752]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4bbb      	ldr	r3, [pc, #748]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e10:	49bc      	ldr	r1, [pc, #752]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f9eb 	bl	80011f0 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e20:	f7ff f9e6 	bl	80011f0 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e19a      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e32:	4bb2      	ldr	r3, [pc, #712]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2208      	movs	r2, #8
 8001e44:	4013      	ands	r3, r2
 8001e46:	d036      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d019      	beq.n	8001e84 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e50:	4baa      	ldr	r3, [pc, #680]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f9c8 	bl	80011f0 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e66:	f7ff f9c3 	bl	80011f0 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e177      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e78:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d0f1      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3ea>
 8001e82:	e018      	b.n	8001eb6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	4b9d      	ldr	r3, [pc, #628]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff f9ae 	bl	80011f0 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff f9a9 	bl	80011f0 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e15d      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eac:	4b93      	ldr	r3, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d1f1      	bne.n	8001e9a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x446>
 8001ec0:	e0ae      	b.n	8002020 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2023      	movs	r0, #35	; 0x23
 8001ec4:	183b      	adds	r3, r7, r0
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	055b      	lsls	r3, r3, #21
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0549      	lsls	r1, r1, #21
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b87      	ldr	r3, [pc, #540]	; (8002108 <HAL_RCC_OscConfig+0x68c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d11a      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b84      	ldr	r3, [pc, #528]	; (8002108 <HAL_RCC_OscConfig+0x68c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b83      	ldr	r3, [pc, #524]	; (8002108 <HAL_RCC_OscConfig+0x68c>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0049      	lsls	r1, r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f04:	f7ff f974 	bl	80011f0 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff f96f 	bl	80011f0 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e123      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b79      	ldr	r3, [pc, #484]	; (8002108 <HAL_RCC_OscConfig+0x68c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4cc>
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0049      	lsls	r1, r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
 8001f46:	e031      	b.n	8001fac <HAL_RCC_OscConfig+0x530>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4ee>
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f56:	496b      	ldr	r1, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f62:	496a      	ldr	r1, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x690>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50
 8001f68:	e020      	b.n	8001fac <HAL_RCC_OscConfig+0x530>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	23a0      	movs	r3, #160	; 0xa0
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d10e      	bne.n	8001f94 <HAL_RCC_OscConfig+0x518>
 8001f76:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7a:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	00c9      	lsls	r1, r1, #3
 8001f80:	430a      	orrs	r2, r1
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f88:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0049      	lsls	r1, r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0x530>
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f98:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001f9a:	495a      	ldr	r1, [pc, #360]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001fa6:	4959      	ldr	r1, [pc, #356]	; (800210c <HAL_RCC_OscConfig+0x690>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f91c 	bl	80011f0 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff f917 	bl	80011f0 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0ca      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d0ef      	beq.n	8001fbe <HAL_RCC_OscConfig+0x542>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f906 	bl	80011f0 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f901 	bl	80011f0 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a46      	ldr	r2, [pc, #280]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0b4      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800200a:	2323      	movs	r3, #35	; 0x23
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 800201a:	493e      	ldr	r1, [pc, #248]	; (8002114 <HAL_RCC_OscConfig+0x698>)
 800201c:	400a      	ands	r2, r1
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x5ae>
 8002028:	e09d      	b.n	8002166 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d100      	bne.n	8002032 <HAL_RCC_OscConfig+0x5b6>
 8002030:	e076      	b.n	8002120 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b02      	cmp	r3, #2
 8002038:	d145      	bne.n	80020c6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <HAL_RCC_OscConfig+0x69c>)
 8002042:	400a      	ands	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff f8d3 	bl	80011f0 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f8ce 	bl	80011f0 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e082      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	049b      	lsls	r3, r3, #18
 800206a:	4013      	ands	r3, r2
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x6a0>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	431a      	orrs	r2, r3
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 800208a:	430a      	orrs	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0449      	lsls	r1, r1, #17
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f8a8 	bl	80011f0 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7ff f8a3 	bl	80011f0 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e057      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	049b      	lsls	r3, r3, #18
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x62a>
 80020c4:	e04f      	b.n	8002166 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 80020cc:	4912      	ldr	r1, [pc, #72]	; (8002118 <HAL_RCC_OscConfig+0x69c>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff f88d 	bl	80011f0 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f888 	bl	80011f0 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03c      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_OscConfig+0x680>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x660>
 80020fa:	e034      	b.n	8002166 <HAL_RCC_OscConfig+0x6ea>
 80020fc:	40021000 	.word	0x40021000
 8002100:	ffff1fff 	.word	0xffff1fff
 8002104:	fffffeff 	.word	0xfffffeff
 8002108:	40007000 	.word	0x40007000
 800210c:	fffffbff 	.word	0xfffffbff
 8002110:	00001388 	.word	0x00001388
 8002114:	efffffff 	.word	0xefffffff
 8002118:	feffffff 	.word	0xfeffffff
 800211c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_OscConfig+0x6f4>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	429a      	cmp	r2, r3
 8002140:	d10f      	bne.n	8002162 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	23f0      	movs	r3, #240	; 0xf0
 8002146:	039b      	lsls	r3, r3, #14
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d107      	bne.n	8002162 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	23c0      	movs	r3, #192	; 0xc0
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b00a      	add	sp, #40	; 0x28
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e128      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d91e      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b93      	ldr	r3, [pc, #588]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4393      	bics	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	4b90      	ldr	r3, [pc, #576]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021a8:	f7ff f822 	bl	80011f0 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b0:	e009      	b.n	80021c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f7ff f81d 	bl	80011f0 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4a8a      	ldr	r2, [pc, #552]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e109      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b87      	ldr	r3, [pc, #540]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4013      	ands	r3, r2
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2202      	movs	r2, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021de:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	22f0      	movs	r2, #240	; 0xf0
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d100      	bne.n	80021fe <HAL_RCC_ClockConfig+0x8a>
 80021fc:	e089      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002206:	4b79      	ldr	r3, [pc, #484]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	4013      	ands	r3, r2
 8002210:	d120      	bne.n	8002254 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0e1      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	049b      	lsls	r3, r3, #18
 8002226:	4013      	ands	r3, r2
 8002228:	d114      	bne.n	8002254 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0d5      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002236:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2204      	movs	r2, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d109      	bne.n	8002254 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0ca      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002244:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0c2      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002254:	4b65      	ldr	r3, [pc, #404]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2203      	movs	r2, #3
 800225a:	4393      	bics	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b62      	ldr	r3, [pc, #392]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe ffc2 	bl	80011f0 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d111      	bne.n	800229c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	e009      	b.n	800228e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227a:	f7fe ffb9 	bl	80011f0 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0a5      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800228e:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	220c      	movs	r2, #12
 8002294:	4013      	ands	r3, r2
 8002296:	2b08      	cmp	r3, #8
 8002298:	d1ef      	bne.n	800227a <HAL_RCC_ClockConfig+0x106>
 800229a:	e03a      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d111      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	e009      	b.n	80022ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a6:	f7fe ffa3 	bl	80011f0 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e08f      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	220c      	movs	r2, #12
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x132>
 80022c6:	e024      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d11b      	bne.n	8002308 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d2:	f7fe ff8d 	bl	80011f0 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e079      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	220c      	movs	r2, #12
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d1ef      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x15e>
 80022f2:	e00e      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7fe ff7c 	bl	80011f0 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e068      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002308:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	220c      	movs	r2, #12
 800230e:	4013      	ands	r3, r2
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	4013      	ands	r3, r2
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d21e      	bcs.n	800235e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002332:	f7fe ff5d 	bl	80011f0 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	e009      	b.n	8002350 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233c:	f7fe ff58 	bl	80011f0 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_RCC_ClockConfig+0x274>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e044      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_ClockConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d1ee      	bne.n	800233c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x27c>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2208      	movs	r2, #8
 8002382:	4013      	ands	r3, r2
 8002384:	d00a      	beq.n	800239c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_RCC_ClockConfig+0x280>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00da      	lsls	r2, r3, #3
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239c:	f000 f832 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023a0:	0001      	movs	r1, r0
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x278>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	220f      	movs	r2, #15
 80023aa:	4013      	ands	r3, r2
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x284>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	000a      	movs	r2, r1
 80023b2:	40da      	lsrs	r2, r3
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_RCC_ClockConfig+0x288>)
 80023b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_RCC_ClockConfig+0x28c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	250b      	movs	r5, #11
 80023be:	197c      	adds	r4, r7, r5
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe fecf 	bl	8001164 <HAL_InitTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023ca:	197b      	adds	r3, r7, r5
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023d2:	197b      	adds	r3, r7, r5
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	e000      	b.n	80023da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40022000 	.word	0x40022000
 80023e8:	00001388 	.word	0x00001388
 80023ec:	40021000 	.word	0x40021000
 80023f0:	fffff8ff 	.word	0xfffff8ff
 80023f4:	ffffc7ff 	.word	0xffffc7ff
 80023f8:	08004640 	.word	0x08004640
 80023fc:	20000008 	.word	0x20000008
 8002400:	2000000c 	.word	0x2000000c

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800240a:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_GetSysClockFreq+0x138>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002412:	230c      	movs	r3, #12
 8002414:	4013      	ands	r3, r2
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d014      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x40>
 800241a:	d900      	bls.n	800241e <HAL_RCC_GetSysClockFreq+0x1a>
 800241c:	e07b      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x112>
 800241e:	2b04      	cmp	r3, #4
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x24>
 8002422:	2b08      	cmp	r3, #8
 8002424:	d00b      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x3a>
 8002426:	e076      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002428:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_RCC_GetSysClockFreq+0x138>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2210      	movs	r2, #16
 800242e:	4013      	ands	r3, r2
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002436:	e07c      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_GetSysClockFreq+0x140>)
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800243c:	e079      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCC_GetSysClockFreq+0x144>)
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002442:	e076      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	0c9a      	lsrs	r2, r3, #18
 8002448:	230f      	movs	r3, #15
 800244a:	401a      	ands	r2, r3
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_GetSysClockFreq+0x148>)
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	0d9a      	lsrs	r2, r3, #22
 8002456:	2303      	movs	r3, #3
 8002458:	4013      	ands	r3, r2
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <HAL_RCC_GetSysClockFreq+0x138>)
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	025b      	lsls	r3, r3, #9
 8002466:	4013      	ands	r3, r2
 8002468:	d01a      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	4a35      	ldr	r2, [pc, #212]	; (8002548 <HAL_RCC_GetSysClockFreq+0x144>)
 8002474:	2300      	movs	r3, #0
 8002476:	69b8      	ldr	r0, [r7, #24]
 8002478:	69f9      	ldr	r1, [r7, #28]
 800247a:	f7fd fef9 	bl	8000270 <__aeabi_lmul>
 800247e:	0002      	movs	r2, r0
 8002480:	000b      	movs	r3, r1
 8002482:	0010      	movs	r0, r2
 8002484:	0019      	movs	r1, r3
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f7fd fecd 	bl	8000230 <__aeabi_uldivmod>
 8002496:	0002      	movs	r2, r0
 8002498:	000b      	movs	r3, r1
 800249a:	0013      	movs	r3, r2
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
 800249e:	e037      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_GetSysClockFreq+0x138>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2210      	movs	r2, #16
 80024a6:	4013      	ands	r3, r2
 80024a8:	d01a      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	68b8      	ldr	r0, [r7, #8]
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	f7fd fed9 	bl	8000270 <__aeabi_lmul>
 80024be:	0002      	movs	r2, r0
 80024c0:	000b      	movs	r3, r1
 80024c2:	0010      	movs	r0, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f7fd fead 	bl	8000230 <__aeabi_uldivmod>
 80024d6:	0002      	movs	r2, r0
 80024d8:	000b      	movs	r3, r1
 80024da:	0013      	movs	r3, r2
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
 80024de:	e017      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	0018      	movs	r0, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	0019      	movs	r1, r3
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ea:	2300      	movs	r3, #0
 80024ec:	f7fd fec0 	bl	8000270 <__aeabi_lmul>
 80024f0:	0002      	movs	r2, r0
 80024f2:	000b      	movs	r3, r1
 80024f4:	0010      	movs	r0, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	001c      	movs	r4, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	001d      	movs	r5, r3
 8002500:	0022      	movs	r2, r4
 8002502:	002b      	movs	r3, r5
 8002504:	f7fd fe94 	bl	8000230 <__aeabi_uldivmod>
 8002508:	0002      	movs	r2, r0
 800250a:	000b      	movs	r3, r1
 800250c:	0013      	movs	r3, r2
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002514:	e00d      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_GetSysClockFreq+0x138>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	2207      	movs	r2, #7
 800251e:	4013      	ands	r3, r2
 8002520:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	3301      	adds	r3, #1
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	0212      	lsls	r2, r2, #8
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002530:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b00e      	add	sp, #56	; 0x38
 800253a:	bdb0      	pop	{r4, r5, r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	003d0900 	.word	0x003d0900
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200
 800254c:	08004658 	.word	0x08004658

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <HAL_RCC_GetHCLKFreq+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff2 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800256c:	0001      	movs	r1, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	2207      	movs	r2, #7
 8002576:	4013      	ands	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_RCC_GetPCLK1Freq+0x28>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	40d9      	lsrs	r1, r3
 800257e:	000b      	movs	r3, r1
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40021000 	.word	0x40021000
 800258c:	08004650 	.word	0x08004650

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	0001      	movs	r1, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	0adb      	lsrs	r3, r3, #11
 80025a0:	2207      	movs	r2, #7
 80025a2:	4013      	ands	r3, r2
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	40d9      	lsrs	r1, r3
 80025aa:	000b      	movs	r3, r1
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08004650 	.word	0x08004650

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80025c4:	2017      	movs	r0, #23
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d100      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80025d6:	e0c7      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d8:	4b84      	ldr	r3, [pc, #528]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	055b      	lsls	r3, r3, #21
 80025e0:	4013      	ands	r3, r2
 80025e2:	d109      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0549      	lsls	r1, r1, #21
 80025ee:	430a      	orrs	r2, r1
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d11a      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002604:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	0049      	lsls	r1, r1, #1
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe fded 	bl	80011f0 <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	e008      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261c:	f7fe fde8 	bl	80011f0 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0d9      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d0f0      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800263a:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	23c0      	movs	r3, #192	; 0xc0
 8002640:	039b      	lsls	r3, r3, #14
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	039b      	lsls	r3, r3, #14
 800264e:	4013      	ands	r3, r2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	429a      	cmp	r2, r3
 8002654:	d013      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	23c0      	movs	r3, #192	; 0xc0
 800265c:	029b      	lsls	r3, r3, #10
 800265e:	401a      	ands	r2, r3
 8002660:	23c0      	movs	r3, #192	; 0xc0
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	429a      	cmp	r2, r3
 8002666:	d10a      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002668:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	401a      	ands	r2, r3
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	429a      	cmp	r2, r3
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0b1      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002682:	23c0      	movs	r3, #192	; 0xc0
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03b      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	23c0      	movs	r3, #192	; 0xc0
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d033      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	4013      	ands	r3, r2
 80026a8:	d02e      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026aa:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	4a51      	ldr	r2, [pc, #324]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b4:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0309      	lsls	r1, r1, #12
 80026be:	430a      	orrs	r2, r1
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026c8:	494b      	ldr	r1, [pc, #300]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	d014      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fd87 	bl	80011f0 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e6:	e009      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fd82 	bl	80011f0 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4a42      	ldr	r2, [pc, #264]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e072      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2220      	movs	r2, #32
 800270e:	4013      	ands	r3, r2
 8002710:	d01f      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	23c0      	movs	r3, #192	; 0xc0
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	401a      	ands	r2, r3
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	429a      	cmp	r2, r3
 8002722:	d10c      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a35      	ldr	r2, [pc, #212]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	23c0      	movs	r3, #192	; 0xc0
 8002734:	039b      	lsls	r3, r3, #14
 8002736:	401a      	ands	r2, r3
 8002738:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002740:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	401a      	ands	r2, r3
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800274e:	430a      	orrs	r2, r1
 8002750:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002752:	2317      	movs	r3, #23
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800275e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002762:	4928      	ldr	r1, [pc, #160]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002764:	400a      	ands	r2, r1
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	220c      	movs	r2, #12
 8002778:	4393      	bics	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002782:	430a      	orrs	r2, r1
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2204      	movs	r2, #4
 800278c:	4013      	ands	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002796:	4013      	ands	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027a0:	430a      	orrs	r2, r1
 80027a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2208      	movs	r2, #8
 80027aa:	4013      	ands	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4013      	ands	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	fffcffff 	.word	0xfffcffff
 80027f8:	fff7ffff 	.word	0xfff7ffff
 80027fc:	00001388 	.word	0x00001388
 8002800:	ffcfffff 	.word	0xffcfffff
 8002804:	efffffff 	.word	0xefffffff
 8002808:	fffff3ff 	.word	0xfffff3ff
 800280c:	ffffcfff 	.word	0xffffcfff
 8002810:	fff3ffff 	.word	0xfff3ffff

08002814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07b      	b.n	800291e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2382      	movs	r3, #130	; 0x82
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	429a      	cmp	r2, r3
 8002838:	d009      	beq.n	800284e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
 8002840:	e005      	b.n	800284e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2251      	movs	r2, #81	; 0x51
 8002858:	5c9b      	ldrb	r3, [r3, r2]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2250      	movs	r2, #80	; 0x50
 8002864:	2100      	movs	r1, #0
 8002866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f7fe fb24 	bl	8000eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2251      	movs	r2, #81	; 0x51
 8002874:	2102      	movs	r1, #2
 8002876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	438a      	bics	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2382      	movs	r3, #130	; 0x82
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	2384      	movs	r3, #132	; 0x84
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	400b      	ands	r3, r1
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	400b      	ands	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2102      	movs	r1, #2
 80028b0:	400b      	ands	r3, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2101      	movs	r1, #1
 80028ba:	400b      	ands	r3, r1
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	400b      	ands	r3, r1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2138      	movs	r1, #56	; 0x38
 80028d0:	400b      	ands	r3, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	400b      	ands	r3, r1
 80028dc:	431a      	orrs	r2, r3
 80028de:	0011      	movs	r1, r2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	019b      	lsls	r3, r3, #6
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2210      	movs	r2, #16
 8002904:	401a      	ands	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2251      	movs	r2, #81	; 0x51
 8002918:	2101      	movs	r1, #1
 800291a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	1dbb      	adds	r3, r7, #6
 8002934:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002936:	231f      	movs	r3, #31
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2250      	movs	r2, #80	; 0x50
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_SPI_Transmit+0x26>
 8002948:	2302      	movs	r3, #2
 800294a:	e145      	b.n	8002bd8 <HAL_SPI_Transmit+0x2b2>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2250      	movs	r2, #80	; 0x50
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002954:	f7fe fc4c 	bl	80011f0 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800295c:	2316      	movs	r3, #22
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	1dba      	adds	r2, r7, #6
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2251      	movs	r2, #81	; 0x51
 800296a:	5c9b      	ldrb	r3, [r3, r2]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d004      	beq.n	800297c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002972:	231f      	movs	r3, #31
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
    goto error;
 800297a:	e126      	b.n	8002bca <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_SPI_Transmit+0x64>
 8002982:	1dbb      	adds	r3, r7, #6
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800298a:	231f      	movs	r3, #31
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    goto error;
 8002992:	e11a      	b.n	8002bca <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2251      	movs	r2, #81	; 0x51
 8002998:	2103      	movs	r1, #3
 800299a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1dba      	adds	r2, r7, #6
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1dba      	adds	r2, r7, #6
 80029b4:	8812      	ldrh	r2, [r2, #0]
 80029b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	429a      	cmp	r2, r3
 80029e0:	d110      	bne.n	8002a04 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	01c9      	lsls	r1, r1, #7
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d007      	beq.n	8002a22 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d152      	bne.n	8002ad4 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_SPI_Transmit+0x11a>
 8002a36:	2316      	movs	r3, #22
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d143      	bne.n	8002ac8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	1c9a      	adds	r2, r3, #2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a64:	e030      	b.n	8002ac8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d112      	bne.n	8002a9a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c9a      	adds	r2, r3, #2
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a98:	e016      	b.n	8002ac8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9a:	f7fe fba9 	bl	80011f0 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d802      	bhi.n	8002ab0 <HAL_SPI_Transmit+0x18a>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_Transmit+0x190>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d108      	bne.n	8002ac8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002ab6:	231f      	movs	r3, #31
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2203      	movs	r2, #3
 8002abc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2251      	movs	r2, #81	; 0x51
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ac6:	e080      	b.n	8002bca <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1c9      	bne.n	8002a66 <HAL_SPI_Transmit+0x140>
 8002ad2:	e053      	b.n	8002b7c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_SPI_Transmit+0x1c0>
 8002adc:	2316      	movs	r3, #22
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d145      	bne.n	8002b72 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b0c:	e031      	b.n	8002b72 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2202      	movs	r2, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d113      	bne.n	8002b44 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b42:	e016      	b.n	8002b72 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b44:	f7fe fb54 	bl	80011f0 <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d802      	bhi.n	8002b5a <HAL_SPI_Transmit+0x234>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_Transmit+0x23a>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8002b60:	231f      	movs	r3, #31
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2203      	movs	r2, #3
 8002b66:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2251      	movs	r2, #81	; 0x51
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b70:	e02b      	b.n	8002bca <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1c8      	bne.n	8002b0e <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fc1e 	bl	80033c4 <SPI_EndRxTxTransaction>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002bb8:	231f      	movs	r3, #31
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e003      	b.n	8002bca <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2251      	movs	r2, #81	; 0x51
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2250      	movs	r2, #80	; 0x50
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bd2:	231f      	movs	r3, #31
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	781b      	ldrb	r3, [r3, #0]
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b008      	add	sp, #32
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bf0:	2117      	movs	r1, #23
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2251      	movs	r2, #81	; 0x51
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d003      	beq.n	8002c0c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c0a:	e109      	b.n	8002e20 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	2382      	movs	r3, #130	; 0x82
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d113      	bne.n	8002c40 <HAL_SPI_Receive+0x60>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2251      	movs	r2, #81	; 0x51
 8002c24:	2104      	movs	r1, #4
 8002c26:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	881c      	ldrh	r4, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	0023      	movs	r3, r4
 8002c38:	f000 f900 	bl	8002e3c <HAL_SPI_TransmitReceive>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	e0f6      	b.n	8002e2e <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2250      	movs	r2, #80	; 0x50
 8002c44:	5c9b      	ldrb	r3, [r3, r2]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_SPI_Receive+0x6e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0ef      	b.n	8002e2e <HAL_SPI_Receive+0x24e>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2250      	movs	r2, #80	; 0x50
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c56:	f7fe facb 	bl	80011f0 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_SPI_Receive+0x8c>
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002c6c:	2317      	movs	r3, #23
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c74:	e0d4      	b.n	8002e20 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2251      	movs	r2, #81	; 0x51
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1dba      	adds	r2, r7, #6
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1dba      	adds	r2, r7, #6
 8002c96:	8812      	ldrh	r2, [r2, #0]
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4956      	ldr	r1, [pc, #344]	; (8002e38 <HAL_SPI_Receive+0x258>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d007      	beq.n	8002d02 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2140      	movs	r1, #64	; 0x40
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <HAL_SPI_Receive+0x12c>
 8002d0a:	e06c      	b.n	8002de6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d0c:	e033      	b.n	8002d76 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d115      	bne.n	8002d48 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	001a      	movs	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d46:	e016      	b.n	8002d76 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d48:	f7fe fa52 	bl	80011f0 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d802      	bhi.n	8002d5e <HAL_SPI_Receive+0x17e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Receive+0x184>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002d64:	2317      	movs	r3, #23
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2203      	movs	r2, #3
 8002d6a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2251      	movs	r2, #81	; 0x51
 8002d70:	2101      	movs	r1, #1
 8002d72:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d74:	e054      	b.n	8002e20 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1c6      	bne.n	8002d0e <HAL_SPI_Receive+0x12e>
 8002d80:	e036      	b.n	8002df0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d113      	bne.n	8002db8 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	1c9a      	adds	r2, r3, #2
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002db6:	e016      	b.n	8002de6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db8:	f7fe fa1a 	bl	80011f0 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d802      	bhi.n	8002dce <HAL_SPI_Receive+0x1ee>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_SPI_Receive+0x1f4>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d108      	bne.n	8002de6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8002dd4:	2317      	movs	r3, #23
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2251      	movs	r2, #81	; 0x51
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]
          goto error;
 8002de4:	e01c      	b.n	8002e20 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1c8      	bne.n	8002d82 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fa7a 	bl	80032f0 <SPI_EndRxTransaction>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 8002e0e:	2317      	movs	r3, #23
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e003      	b.n	8002e20 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2251      	movs	r2, #81	; 0x51
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2250      	movs	r2, #80	; 0x50
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e28:	2317      	movs	r3, #23
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b007      	add	sp, #28
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	ffffbfff 	.word	0xffffbfff

08002e3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	1cbb      	adds	r3, r7, #2
 8002e4c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e52:	232b      	movs	r3, #43	; 0x2b
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2250      	movs	r2, #80	; 0x50
 8002e5e:	5c9b      	ldrb	r3, [r3, r2]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x2c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e1b0      	b.n	80031ca <HAL_SPI_TransmitReceive+0x38e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2250      	movs	r2, #80	; 0x50
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e70:	f7fe f9be 	bl	80011f0 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e78:	2023      	movs	r0, #35	; 0x23
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	2151      	movs	r1, #81	; 0x51
 8002e80:	5c52      	ldrb	r2, [r2, r1]
 8002e82:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e8a:	231a      	movs	r3, #26
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	1cba      	adds	r2, r7, #2
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d011      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x84>
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	2382      	movs	r3, #130	; 0x82
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x7a>
 8002eae:	183b      	adds	r3, r7, r0
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d004      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002eb6:	232b      	movs	r3, #43	; 0x2b
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ebe:	e17d      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x98>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x98>
 8002ecc:	1cbb      	adds	r3, r7, #2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ed4:	232b      	movs	r3, #43	; 0x2b
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
    goto error;
 8002edc:	e16e      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2251      	movs	r2, #81	; 0x51
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d003      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2251      	movs	r2, #81	; 0x51
 8002eee:	2105      	movs	r1, #5
 8002ef0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1cba      	adds	r2, r7, #2
 8002f02:	8812      	ldrh	r2, [r2, #0]
 8002f04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1cba      	adds	r2, r7, #2
 8002f0a:	8812      	ldrh	r2, [r2, #0]
 8002f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1cba      	adds	r2, r7, #2
 8002f18:	8812      	ldrh	r2, [r2, #0]
 8002f1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1cba      	adds	r2, r7, #2
 8002f20:	8812      	ldrh	r2, [r2, #0]
 8002f22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d007      	beq.n	8002f4e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d000      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x120>
 8002f5a:	e07f      	b.n	800305c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x134>
 8002f64:	231a      	movs	r3, #26
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d000      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x134>
 8002f6e:	e06a      	b.n	8003046 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f94:	e057      	b.n	8003046 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11b      	bne.n	8002fdc <HAL_SPI_TransmitReceive+0x1a0>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x1a0>
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d113      	bne.n	8002fdc <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	1c9a      	adds	r2, r3, #2
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d119      	bne.n	800301e <HAL_SPI_TransmitReceive+0x1e2>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d014      	beq.n	800301e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	b292      	uxth	r2, r2
 8003000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	1c9a      	adds	r2, r3, #2
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301a:	2301      	movs	r3, #1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800301e:	f7fe f8e7 	bl	80011f0 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302a:	429a      	cmp	r2, r3
 800302c:	d80b      	bhi.n	8003046 <HAL_SPI_TransmitReceive+0x20a>
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	3301      	adds	r3, #1
 8003032:	d008      	beq.n	8003046 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8003034:	232b      	movs	r3, #43	; 0x2b
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2203      	movs	r2, #3
 800303a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2251      	movs	r2, #81	; 0x51
 8003040:	2101      	movs	r1, #1
 8003042:	5499      	strb	r1, [r3, r2]
        goto error;
 8003044:	e0ba      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1a2      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x15a>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d19d      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x15a>
 800305a:	e083      	b.n	8003164 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x234>
 8003064:	231a      	movs	r3, #26
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d000      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x234>
 800306e:	e06f      	b.n	8003150 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003096:	e05b      	b.n	8003150 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2202      	movs	r2, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d11c      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2a4>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d017      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x2a4>
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d114      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d119      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x2e6>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d014      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800311e:	2301      	movs	r3, #1
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003122:	f7fe f865 	bl	80011f0 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800312e:	429a      	cmp	r2, r3
 8003130:	d802      	bhi.n	8003138 <HAL_SPI_TransmitReceive+0x2fc>
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	3301      	adds	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_SPI_TransmitReceive+0x302>
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800313e:	232b      	movs	r3, #43	; 0x2b
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2203      	movs	r2, #3
 8003144:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2251      	movs	r2, #81	; 0x51
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
        goto error;
 800314e:	e035      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d19e      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x25c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d199      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f92a 	bl	80033c4 <SPI_EndRxTxTransaction>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d007      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8003174:	232b      	movs	r3, #43	; 0x2b
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003182:	e01b      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80031aa:	232b      	movs	r3, #43	; 0x2b
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e003      	b.n	80031bc <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2251      	movs	r2, #81	; 0x51
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2250      	movs	r2, #80	; 0x50
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031c4:	232b      	movs	r3, #43	; 0x2b
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	781b      	ldrb	r3, [r3, #0]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b00c      	add	sp, #48	; 0x30
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031e4:	f7fe f804 	bl	80011f0 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031f4:	f7fd fffc 	bl	80011f0 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	015b      	lsls	r3, r3, #5
 8003202:	0d1b      	lsrs	r3, r3, #20
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	4353      	muls	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320a:	e058      	b.n	80032be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	d055      	beq.n	80032be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003212:	f7fd ffed 	bl	80011f0 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	429a      	cmp	r2, r3
 8003220:	d902      	bls.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d142      	bne.n	80032ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	21e0      	movs	r1, #224	; 0xe0
 8003234:	438a      	bics	r2, r1
 8003236:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	2382      	movs	r3, #130	; 0x82
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	429a      	cmp	r2, r3
 8003242:	d113      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	429a      	cmp	r2, r3
 800324e:	d005      	beq.n	800325c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	438a      	bics	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	019b      	lsls	r3, r3, #6
 8003274:	429a      	cmp	r2, r3
 8003276:	d110      	bne.n	800329a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	491a      	ldr	r1, [pc, #104]	; (80032ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003284:	400a      	ands	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	0189      	lsls	r1, r1, #6
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2251      	movs	r2, #81	; 0x51
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2250      	movs	r2, #80	; 0x50
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e017      	b.n	80032de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	425a      	negs	r2, r3
 80032ce:	4153      	adcs	r3, r2
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	001a      	movs	r2, r3
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d197      	bne.n	800320c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b008      	add	sp, #32
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000008 	.word	0x20000008
 80032ec:	ffffdfff 	.word	0xffffdfff

080032f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	2382      	movs	r3, #130	; 0x82
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	429a      	cmp	r2, r3
 8003306:	d113      	bne.n	8003330 <SPI_EndRxTransaction+0x40>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	429a      	cmp	r2, r3
 8003312:	d005      	beq.n	8003320 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	429a      	cmp	r2, r3
 800331e:	d107      	bne.n	8003330 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2140      	movs	r1, #64	; 0x40
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	2382      	movs	r3, #130	; 0x82
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	429a      	cmp	r2, r3
 800333a:	d12b      	bne.n	8003394 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	429a      	cmp	r2, r3
 8003346:	d012      	beq.n	800336e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	0013      	movs	r3, r2
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	f7ff ff3d 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d02d      	beq.n	80033ba <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	2220      	movs	r2, #32
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e026      	b.n	80033bc <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0013      	movs	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	2101      	movs	r1, #1
 800337c:	f7ff ff2a 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d01a      	beq.n	80033ba <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	2220      	movs	r2, #32
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e013      	b.n	80033bc <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	0013      	movs	r3, r2
 800339e:	2200      	movs	r2, #0
 80033a0:	2101      	movs	r1, #1
 80033a2:	f7ff ff17 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d007      	beq.n	80033ba <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	2220      	movs	r2, #32
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e000      	b.n	80033bc <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b004      	add	sp, #16
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <SPI_EndRxTxTransaction+0x84>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	491d      	ldr	r1, [pc, #116]	; (800344c <SPI_EndRxTxTransaction+0x88>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fc fe9e 	bl	8000118 <__udivsi3>
 80033dc:	0003      	movs	r3, r0
 80033de:	001a      	movs	r2, r3
 80033e0:	0013      	movs	r3, r2
 80033e2:	015b      	lsls	r3, r3, #5
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	2382      	movs	r3, #130	; 0x82
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d112      	bne.n	8003420 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	0013      	movs	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	f7ff fee4 	bl	80031d4 <SPI_WaitFlagStateUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d016      	beq.n	800343e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	2220      	movs	r2, #32
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3b01      	subs	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	4013      	ands	r3, r2
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d0f2      	beq.n	8003420 <SPI_EndRxTxTransaction+0x5c>
 800343a:	e000      	b.n	800343e <SPI_EndRxTxTransaction+0x7a>
        break;
 800343c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000008 	.word	0x20000008
 800344c:	016e3600 	.word	0x016e3600

08003450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e044      	b.n	80034ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2278      	movs	r2, #120	; 0x78
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fd63 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2224      	movs	r2, #36	; 0x24
 800347e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	438a      	bics	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fbce 	bl	8003c34 <UART_SetConfig>
 8003498:	0003      	movs	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e024      	b.n	80034ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fe0b 	bl	80040c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	490d      	ldr	r1, [pc, #52]	; (80034f4 <HAL_UART_Init+0xa4>)
 80034be:	400a      	ands	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	212a      	movs	r1, #42	; 0x2a
 80034ce:	438a      	bics	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fea3 	bl	8004230 <UART_CheckIdleState>
 80034ea:	0003      	movs	r3, r0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	ffffb7ff 	.word	0xffffb7ff

080034f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	1dbb      	adds	r3, r7, #6
 8003506:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350c:	2b20      	cmp	r3, #32
 800350e:	d000      	beq.n	8003512 <HAL_UART_Transmit+0x1a>
 8003510:	e08c      	b.n	800362c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_UART_Transmit+0x28>
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e084      	b.n	800362e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	015b      	lsls	r3, r3, #5
 800352c:	429a      	cmp	r2, r3
 800352e:	d109      	bne.n	8003544 <HAL_UART_Transmit+0x4c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2201      	movs	r2, #1
 800353c:	4013      	ands	r3, r2
 800353e:	d001      	beq.n	8003544 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e074      	b.n	800362e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2284      	movs	r2, #132	; 0x84
 8003548:	2100      	movs	r1, #0
 800354a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2221      	movs	r2, #33	; 0x21
 8003550:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003552:	f7fd fe4d 	bl	80011f0 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1dba      	adds	r2, r7, #6
 800355e:	2150      	movs	r1, #80	; 0x50
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1dba      	adds	r2, r7, #6
 8003568:	2152      	movs	r1, #82	; 0x52
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	015b      	lsls	r3, r3, #5
 8003576:	429a      	cmp	r2, r3
 8003578:	d108      	bne.n	800358c <HAL_UART_Transmit+0x94>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e003      	b.n	8003594 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003594:	e02f      	b.n	80035f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	0013      	movs	r3, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	f000 feec 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e03b      	b.n	800362e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	001a      	movs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	05d2      	lsls	r2, r2, #23
 80035c8:	0dd2      	lsrs	r2, r2, #23
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	3302      	adds	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e007      	b.n	80035e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2252      	movs	r2, #82	; 0x52
 80035e8:	5a9b      	ldrh	r3, [r3, r2]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b299      	uxth	r1, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2252      	movs	r2, #82	; 0x52
 80035f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2252      	movs	r2, #82	; 0x52
 80035fa:	5a9b      	ldrh	r3, [r3, r2]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1c9      	bne.n	8003596 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	0013      	movs	r3, r2
 800360c:	2200      	movs	r2, #0
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	f000 feb6 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d004      	beq.n	8003622 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e005      	b.n	800362e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b008      	add	sp, #32
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b0ab      	sub	sp, #172	; 0xac
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	22a4      	movs	r2, #164	; 0xa4
 8003648:	18b9      	adds	r1, r7, r2
 800364a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	20a0      	movs	r0, #160	; 0xa0
 8003654:	1839      	adds	r1, r7, r0
 8003656:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	219c      	movs	r1, #156	; 0x9c
 8003660:	1879      	adds	r1, r7, r1
 8003662:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003664:	0011      	movs	r1, r2
 8003666:	18bb      	adds	r3, r7, r2
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a99      	ldr	r2, [pc, #612]	; (80038d0 <HAL_UART_IRQHandler+0x298>)
 800366c:	4013      	ands	r3, r2
 800366e:	2298      	movs	r2, #152	; 0x98
 8003670:	18bc      	adds	r4, r7, r2
 8003672:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003674:	18bb      	adds	r3, r7, r2
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d114      	bne.n	80036a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800367c:	187b      	adds	r3, r7, r1
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2220      	movs	r2, #32
 8003682:	4013      	ands	r3, r2
 8003684:	d00f      	beq.n	80036a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003686:	183b      	adds	r3, r7, r0
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	4013      	ands	r3, r2
 800368e:	d00a      	beq.n	80036a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <HAL_UART_IRQHandler+0x62>
 8003698:	e2a0      	b.n	8003bdc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	0010      	movs	r0, r2
 80036a2:	4798      	blx	r3
      }
      return;
 80036a4:	e29a      	b.n	8003bdc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036a6:	2398      	movs	r3, #152	; 0x98
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d100      	bne.n	80036b2 <HAL_UART_IRQHandler+0x7a>
 80036b0:	e114      	b.n	80038dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036b2:	239c      	movs	r3, #156	; 0x9c
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d106      	bne.n	80036cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036be:	23a0      	movs	r3, #160	; 0xa0
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a83      	ldr	r2, [pc, #524]	; (80038d4 <HAL_UART_IRQHandler+0x29c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	d100      	bne.n	80036cc <HAL_UART_IRQHandler+0x94>
 80036ca:	e107      	b.n	80038dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036cc:	23a4      	movs	r3, #164	; 0xa4
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	d012      	beq.n	80036fe <HAL_UART_IRQHandler+0xc6>
 80036d8:	23a0      	movs	r3, #160	; 0xa0
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2284      	movs	r2, #132	; 0x84
 80036f2:	589b      	ldr	r3, [r3, r2]
 80036f4:	2201      	movs	r2, #1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2184      	movs	r1, #132	; 0x84
 80036fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036fe:	23a4      	movs	r3, #164	; 0xa4
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2202      	movs	r2, #2
 8003706:	4013      	ands	r3, r2
 8003708:	d011      	beq.n	800372e <HAL_UART_IRQHandler+0xf6>
 800370a:	239c      	movs	r3, #156	; 0x9c
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	d00b      	beq.n	800372e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2202      	movs	r2, #2
 800371c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2284      	movs	r2, #132	; 0x84
 8003722:	589b      	ldr	r3, [r3, r2]
 8003724:	2204      	movs	r2, #4
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2184      	movs	r1, #132	; 0x84
 800372c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800372e:	23a4      	movs	r3, #164	; 0xa4
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	d011      	beq.n	800375e <HAL_UART_IRQHandler+0x126>
 800373a:	239c      	movs	r3, #156	; 0x9c
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2204      	movs	r2, #4
 800374c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2284      	movs	r2, #132	; 0x84
 8003752:	589b      	ldr	r3, [r3, r2]
 8003754:	2202      	movs	r2, #2
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2184      	movs	r1, #132	; 0x84
 800375c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800375e:	23a4      	movs	r3, #164	; 0xa4
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	4013      	ands	r3, r2
 8003768:	d017      	beq.n	800379a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800376a:	23a0      	movs	r3, #160	; 0xa0
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2220      	movs	r2, #32
 8003772:	4013      	ands	r3, r2
 8003774:	d105      	bne.n	8003782 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003776:	239c      	movs	r3, #156	; 0x9c
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2208      	movs	r2, #8
 8003788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2284      	movs	r2, #132	; 0x84
 800378e:	589b      	ldr	r3, [r3, r2]
 8003790:	2208      	movs	r2, #8
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2184      	movs	r1, #132	; 0x84
 8003798:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800379a:	23a4      	movs	r3, #164	; 0xa4
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4013      	ands	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_UART_IRQHandler+0x198>
 80037a8:	23a0      	movs	r3, #160	; 0xa0
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	04db      	lsls	r3, r3, #19
 80037b2:	4013      	ands	r3, r2
 80037b4:	d00c      	beq.n	80037d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2284      	movs	r2, #132	; 0x84
 80037c4:	589b      	ldr	r3, [r3, r2]
 80037c6:	2220      	movs	r2, #32
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2184      	movs	r1, #132	; 0x84
 80037ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2284      	movs	r2, #132	; 0x84
 80037d4:	589b      	ldr	r3, [r3, r2]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <HAL_UART_IRQHandler+0x1a4>
 80037da:	e201      	b.n	8003be0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037dc:	23a4      	movs	r3, #164	; 0xa4
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037e8:	23a0      	movs	r3, #160	; 0xa0
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2220      	movs	r2, #32
 80037f0:	4013      	ands	r3, r2
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	0010      	movs	r0, r2
 8003804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2284      	movs	r2, #132	; 0x84
 800380a:	589b      	ldr	r3, [r3, r2]
 800380c:	2194      	movs	r1, #148	; 0x94
 800380e:	187a      	adds	r2, r7, r1
 8003810:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	4013      	ands	r3, r2
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d004      	beq.n	800382a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003820:	187b      	adds	r3, r7, r1
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2228      	movs	r2, #40	; 0x28
 8003826:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003828:	d047      	beq.n	80038ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 fe11 	bl	8004454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	4013      	ands	r3, r2
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d137      	bne.n	80038b0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003840:	f3ef 8310 	mrs	r3, PRIMASK
 8003844:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003848:	2090      	movs	r0, #144	; 0x90
 800384a:	183a      	adds	r2, r7, r0
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	2301      	movs	r3, #1
 8003850:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2140      	movs	r1, #64	; 0x40
 8003866:	438a      	bics	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	183b      	adds	r3, r7, r0
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <HAL_UART_IRQHandler+0x2a0>)
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd fe73 	bl	8001578 <HAL_DMA_Abort_IT>
 8003892:	1e03      	subs	r3, r0, #0
 8003894:	d01a      	beq.n	80038cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a0:	0018      	movs	r0, r3
 80038a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e012      	b.n	80038cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 f9af 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ae:	e00d      	b.n	80038cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 f9aa 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e008      	b.n	80038cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 f9a5 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2284      	movs	r2, #132	; 0x84
 80038c6:	2100      	movs	r1, #0
 80038c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038ca:	e189      	b.n	8003be0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	46c0      	nop			; (mov r8, r8)
    return;
 80038ce:	e187      	b.n	8003be0 <HAL_UART_IRQHandler+0x5a8>
 80038d0:	0000080f 	.word	0x0000080f
 80038d4:	04000120 	.word	0x04000120
 80038d8:	0800451d 	.word	0x0800451d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d000      	beq.n	80038e6 <HAL_UART_IRQHandler+0x2ae>
 80038e4:	e13b      	b.n	8003b5e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038e6:	23a4      	movs	r3, #164	; 0xa4
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	4013      	ands	r3, r2
 80038f0:	d100      	bne.n	80038f4 <HAL_UART_IRQHandler+0x2bc>
 80038f2:	e134      	b.n	8003b5e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038f4:	23a0      	movs	r3, #160	; 0xa0
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	4013      	ands	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_UART_IRQHandler+0x2ca>
 8003900:	e12d      	b.n	8003b5e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2210      	movs	r2, #16
 8003908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	4013      	ands	r3, r2
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d000      	beq.n	800391a <HAL_UART_IRQHandler+0x2e2>
 8003918:	e0a1      	b.n	8003a5e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	217e      	movs	r1, #126	; 0x7e
 8003924:	187b      	adds	r3, r7, r1
 8003926:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003928:	187b      	adds	r3, r7, r1
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d100      	bne.n	8003932 <HAL_UART_IRQHandler+0x2fa>
 8003930:	e158      	b.n	8003be4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2258      	movs	r2, #88	; 0x58
 8003936:	5a9b      	ldrh	r3, [r3, r2]
 8003938:	187a      	adds	r2, r7, r1
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d300      	bcc.n	8003942 <HAL_UART_IRQHandler+0x30a>
 8003940:	e150      	b.n	8003be4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	187a      	adds	r2, r7, r1
 8003946:	215a      	movs	r1, #90	; 0x5a
 8003948:	8812      	ldrh	r2, [r2, #0]
 800394a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2220      	movs	r2, #32
 8003956:	4013      	ands	r3, r2
 8003958:	d16f      	bne.n	8003a3a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003962:	67bb      	str	r3, [r7, #120]	; 0x78
 8003964:	2301      	movs	r3, #1
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	499e      	ldr	r1, [pc, #632]	; (8003bf4 <HAL_UART_IRQHandler+0x5bc>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	677b      	str	r3, [r7, #116]	; 0x74
 8003996:	2301      	movs	r3, #1
 8003998:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438a      	bics	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039be:	f3ef 8310 	mrs	r3, PRIMASK
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80039c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c6:	673b      	str	r3, [r7, #112]	; 0x70
 80039c8:	2301      	movs	r3, #1
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ce:	f383 8810 	msr	PRIMASK, r3
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2140      	movs	r1, #64	; 0x40
 80039e0:	438a      	bics	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a08:	2301      	movs	r3, #1
 8003a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2110      	movs	r1, #16
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7fd fd5f 	bl	80014f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2258      	movs	r2, #88	; 0x58
 8003a44:	5a9a      	ldrh	r2, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	215a      	movs	r1, #90	; 0x5a
 8003a4a:	5a5b      	ldrh	r3, [r3, r1]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0011      	movs	r1, r2
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 f8e0 	bl	8003c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a5c:	e0c2      	b.n	8003be4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2258      	movs	r2, #88	; 0x58
 8003a62:	5a99      	ldrh	r1, [r3, r2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	225a      	movs	r2, #90	; 0x5a
 8003a68:	5a9b      	ldrh	r3, [r3, r2]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	208e      	movs	r0, #142	; 0x8e
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	1a8a      	subs	r2, r1, r2
 8003a72:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	225a      	movs	r2, #90	; 0x5a
 8003a78:	5a9b      	ldrh	r3, [r3, r2]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d100      	bne.n	8003a82 <HAL_UART_IRQHandler+0x44a>
 8003a80:	e0b2      	b.n	8003be8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d100      	bne.n	8003a8c <HAL_UART_IRQHandler+0x454>
 8003a8a:	e0ad      	b.n	8003be8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a92:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a94:	2488      	movs	r4, #136	; 0x88
 8003a96:	193a      	adds	r2, r7, r4
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4951      	ldr	r1, [pc, #324]	; (8003bf8 <HAL_UART_IRQHandler+0x5c0>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003acc:	2484      	movs	r4, #132	; 0x84
 8003ace:	193a      	adds	r2, r7, r4
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	2120      	movs	r1, #32
 8003b02:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b10:	f3ef 8310 	mrs	r3, PRIMASK
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	2480      	movs	r4, #128	; 0x80
 8003b1a:	193a      	adds	r2, r7, r4
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2110      	movs	r1, #16
 8003b36:	438a      	bics	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f860 	bl	8003c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b5c:	e044      	b.n	8003be8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b5e:	23a4      	movs	r3, #164	; 0xa4
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	035b      	lsls	r3, r3, #13
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d010      	beq.n	8003b8e <HAL_UART_IRQHandler+0x556>
 8003b6c:	239c      	movs	r3, #156	; 0x9c
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	03db      	lsls	r3, r3, #15
 8003b76:	4013      	ands	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0352      	lsls	r2, r2, #13
 8003b82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 fd0a 	bl	80045a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b8c:	e02f      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b8e:	23a4      	movs	r3, #164	; 0xa4
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	4013      	ands	r3, r2
 8003b98:	d00f      	beq.n	8003bba <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b9a:	23a0      	movs	r3, #160	; 0xa0
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d009      	beq.n	8003bba <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01e      	beq.n	8003bec <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	4798      	blx	r3
    }
    return;
 8003bb8:	e018      	b.n	8003bec <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bba:	23a4      	movs	r3, #164	; 0xa4
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2240      	movs	r2, #64	; 0x40
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_UART_IRQHandler+0x5b6>
 8003bc6:	23a0      	movs	r3, #160	; 0xa0
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2240      	movs	r2, #64	; 0x40
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fcb8 	bl	800454a <UART_EndTransmit_IT>
    return;
 8003bda:	e008      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
      return;
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	e006      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
    return;
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	e004      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
      return;
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	e002      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
      return;
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	e000      	b.n	8003bee <HAL_UART_IRQHandler+0x5b6>
    return;
 8003bec:	46c0      	nop			; (mov r8, r8)
  }

}
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b02b      	add	sp, #172	; 0xac
 8003bf2:	bd90      	pop	{r4, r7, pc}
 8003bf4:	fffffeff 	.word	0xfffffeff
 8003bf8:	fffffedf 	.word	0xfffffedf

08003bfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	000a      	movs	r2, r1
 8003c26:	1cbb      	adds	r3, r7, #2
 8003c28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b5b0      	push	{r4, r5, r7, lr}
 8003c36:	b08e      	sub	sp, #56	; 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c3c:	231a      	movs	r3, #26
 8003c3e:	2218      	movs	r2, #24
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4ab4      	ldr	r2, [pc, #720]	; (8003f38 <UART_SetConfig+0x304>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4aaf      	ldr	r2, [pc, #700]	; (8003f3c <UART_SetConfig+0x308>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4aa9      	ldr	r2, [pc, #676]	; (8003f40 <UART_SetConfig+0x30c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4aa5      	ldr	r2, [pc, #660]	; (8003f44 <UART_SetConfig+0x310>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4aa1      	ldr	r2, [pc, #644]	; (8003f48 <UART_SetConfig+0x314>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d131      	bne.n	8003d2c <UART_SetConfig+0xf8>
 8003cc8:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <UART_SetConfig+0x318>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	220c      	movs	r2, #12
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d01d      	beq.n	8003d10 <UART_SetConfig+0xdc>
 8003cd4:	d823      	bhi.n	8003d1e <UART_SetConfig+0xea>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d00c      	beq.n	8003cf4 <UART_SetConfig+0xc0>
 8003cda:	d820      	bhi.n	8003d1e <UART_SetConfig+0xea>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <UART_SetConfig+0xb2>
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d00e      	beq.n	8003d02 <UART_SetConfig+0xce>
 8003ce4:	e01b      	b.n	8003d1e <UART_SetConfig+0xea>
 8003ce6:	231b      	movs	r3, #27
 8003ce8:	2218      	movs	r2, #24
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	19db      	adds	r3, r3, r7
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e065      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2218      	movs	r2, #24
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	19db      	adds	r3, r3, r7
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e05e      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d02:	231b      	movs	r3, #27
 8003d04:	2218      	movs	r2, #24
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	19db      	adds	r3, r3, r7
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e057      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d10:	231b      	movs	r3, #27
 8003d12:	2218      	movs	r2, #24
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2208      	movs	r2, #8
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e050      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d1e:	231b      	movs	r3, #27
 8003d20:	2218      	movs	r2, #24
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	19db      	adds	r3, r3, r7
 8003d26:	2210      	movs	r2, #16
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e049      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	; (8003f40 <UART_SetConfig+0x30c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d13e      	bne.n	8003db4 <UART_SetConfig+0x180>
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <UART_SetConfig+0x318>)
 8003d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d3a:	23c0      	movs	r3, #192	; 0xc0
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4013      	ands	r3, r2
 8003d40:	22c0      	movs	r2, #192	; 0xc0
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <UART_SetConfig+0x164>
 8003d48:	22c0      	movs	r2, #192	; 0xc0
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d82a      	bhi.n	8003da6 <UART_SetConfig+0x172>
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d011      	beq.n	8003d7c <UART_SetConfig+0x148>
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d822      	bhi.n	8003da6 <UART_SetConfig+0x172>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <UART_SetConfig+0x13a>
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	00d2      	lsls	r2, r2, #3
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <UART_SetConfig+0x156>
 8003d6c:	e01b      	b.n	8003da6 <UART_SetConfig+0x172>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2218      	movs	r2, #24
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e021      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d7c:	231b      	movs	r3, #27
 8003d7e:	2218      	movs	r2, #24
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e01a      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	2218      	movs	r2, #24
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e013      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003d98:	231b      	movs	r3, #27
 8003d9a:	2218      	movs	r2, #24
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	2208      	movs	r2, #8
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e00c      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003da6:	231b      	movs	r3, #27
 8003da8:	2218      	movs	r2, #24
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	19db      	adds	r3, r3, r7
 8003dae:	2210      	movs	r2, #16
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e005      	b.n	8003dc0 <UART_SetConfig+0x18c>
 8003db4:	231b      	movs	r3, #27
 8003db6:	2218      	movs	r2, #24
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5e      	ldr	r2, [pc, #376]	; (8003f40 <UART_SetConfig+0x30c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d000      	beq.n	8003dcc <UART_SetConfig+0x198>
 8003dca:	e084      	b.n	8003ed6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dcc:	231b      	movs	r3, #27
 8003dce:	2218      	movs	r2, #24
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	19db      	adds	r3, r3, r7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d01d      	beq.n	8003e16 <UART_SetConfig+0x1e2>
 8003dda:	dc20      	bgt.n	8003e1e <UART_SetConfig+0x1ea>
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d015      	beq.n	8003e0c <UART_SetConfig+0x1d8>
 8003de0:	dc1d      	bgt.n	8003e1e <UART_SetConfig+0x1ea>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x1b8>
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d005      	beq.n	8003df6 <UART_SetConfig+0x1c2>
 8003dea:	e018      	b.n	8003e1e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fbba 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003df0:	0003      	movs	r3, r0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df4:	e01c      	b.n	8003e30 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df6:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <UART_SetConfig+0x318>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d002      	beq.n	8003e06 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <UART_SetConfig+0x31c>)
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e04:	e014      	b.n	8003e30 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <UART_SetConfig+0x320>)
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e0a:	e011      	b.n	8003e30 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0c:	f7fe fafa 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8003e10:	0003      	movs	r3, r0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e14:	e00c      	b.n	8003e30 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e1c:	e008      	b.n	8003e30 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e22:	231a      	movs	r3, #26
 8003e24:	2218      	movs	r2, #24
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
        break;
 8003e2e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d100      	bne.n	8003e38 <UART_SetConfig+0x204>
 8003e36:	e12f      	b.n	8004098 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d305      	bcc.n	8003e54 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d906      	bls.n	8003e62 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003e54:	231a      	movs	r3, #26
 8003e56:	2218      	movs	r2, #24
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	19db      	adds	r3, r3, r7
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e11a      	b.n	8004098 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	000b      	movs	r3, r1
 8003e70:	0e1b      	lsrs	r3, r3, #24
 8003e72:	0010      	movs	r0, r2
 8003e74:	0205      	lsls	r5, r0, #8
 8003e76:	431d      	orrs	r5, r3
 8003e78:	000b      	movs	r3, r1
 8003e7a:	021c      	lsls	r4, r3, #8
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	1900      	adds	r0, r0, r4
 8003e8e:	4169      	adcs	r1, r5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f7fc f9c7 	bl	8000230 <__aeabi_uldivmod>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	000b      	movs	r3, r1
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	23c0      	movs	r3, #192	; 0xc0
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d309      	bcc.n	8003ec8 <UART_SetConfig+0x294>
 8003eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	035b      	lsls	r3, r3, #13
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d204      	bcs.n	8003ec8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	e0e7      	b.n	8004098 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec8:	231a      	movs	r3, #26
 8003eca:	2218      	movs	r2, #24
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e0e0      	b.n	8004098 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d000      	beq.n	8003ee4 <UART_SetConfig+0x2b0>
 8003ee2:	e082      	b.n	8003fea <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003ee4:	231b      	movs	r3, #27
 8003ee6:	2218      	movs	r2, #24
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d834      	bhi.n	8003f5c <UART_SetConfig+0x328>
 8003ef2:	009a      	lsls	r2, r3, #2
 8003ef4:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <UART_SetConfig+0x324>)
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fb32 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003f00:	0003      	movs	r3, r0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f04:	e033      	b.n	8003f6e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f06:	f7fe fb43 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f0e:	e02e      	b.n	8003f6e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <UART_SetConfig+0x318>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2210      	movs	r2, #16
 8003f16:	4013      	ands	r3, r2
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <UART_SetConfig+0x31c>)
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f1e:	e026      	b.n	8003f6e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <UART_SetConfig+0x320>)
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f24:	e023      	b.n	8003f6e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fa6d 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f2e:	e01e      	b.n	8003f6e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f36:	e01a      	b.n	8003f6e <UART_SetConfig+0x33a>
 8003f38:	efff69f3 	.word	0xefff69f3
 8003f3c:	ffffcfff 	.word	0xffffcfff
 8003f40:	40004800 	.word	0x40004800
 8003f44:	fffff4ff 	.word	0xfffff4ff
 8003f48:	40004400 	.word	0x40004400
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	003d0900 	.word	0x003d0900
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	08004664 	.word	0x08004664
      default:
        pclk = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f60:	231a      	movs	r3, #26
 8003f62:	2218      	movs	r2, #24
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
        break;
 8003f6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d100      	bne.n	8003f76 <UART_SetConfig+0x342>
 8003f74:	e090      	b.n	8004098 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	005a      	lsls	r2, r3, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	18d2      	adds	r2, r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0019      	movs	r1, r3
 8003f88:	0010      	movs	r0, r2
 8003f8a:	f7fc f8c5 	bl	8000118 <__udivsi3>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	2b0f      	cmp	r3, #15
 8003f96:	d921      	bls.n	8003fdc <UART_SetConfig+0x3a8>
 8003f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	025b      	lsls	r3, r3, #9
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d21c      	bcs.n	8003fdc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	200e      	movs	r0, #14
 8003fa8:	2418      	movs	r4, #24
 8003faa:	1903      	adds	r3, r0, r4
 8003fac:	19db      	adds	r3, r3, r7
 8003fae:	210f      	movs	r1, #15
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2207      	movs	r2, #7
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b299      	uxth	r1, r3
 8003fc0:	1903      	adds	r3, r0, r4
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	1902      	adds	r2, r0, r4
 8003fc6:	19d2      	adds	r2, r2, r7
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	1902      	adds	r2, r0, r4
 8003fd4:	19d2      	adds	r2, r2, r7
 8003fd6:	8812      	ldrh	r2, [r2, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	e05d      	b.n	8004098 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003fdc:	231a      	movs	r3, #26
 8003fde:	2218      	movs	r2, #24
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e056      	b.n	8004098 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fea:	231b      	movs	r3, #27
 8003fec:	2218      	movs	r2, #24
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d822      	bhi.n	800403e <UART_SetConfig+0x40a>
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <UART_SetConfig+0x484>)
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004002:	f7fe faaf 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8004006:	0003      	movs	r3, r0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800400a:	e021      	b.n	8004050 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fac0 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8004010:	0003      	movs	r3, r0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004014:	e01c      	b.n	8004050 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <UART_SetConfig+0x488>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	4013      	ands	r3, r2
 800401e:	d002      	beq.n	8004026 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004020:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <UART_SetConfig+0x48c>)
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004024:	e014      	b.n	8004050 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004026:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <UART_SetConfig+0x490>)
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800402a:	e011      	b.n	8004050 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402c:	f7fe f9ea 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8004030:	0003      	movs	r3, r0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004034:	e00c      	b.n	8004050 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800403c:	e008      	b.n	8004050 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004042:	231a      	movs	r3, #26
 8004044:	2218      	movs	r2, #24
 8004046:	189b      	adds	r3, r3, r2
 8004048:	19db      	adds	r3, r3, r7
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
        break;
 800404e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085a      	lsrs	r2, r3, #1
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	18d2      	adds	r2, r2, r3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	0019      	movs	r1, r3
 8004066:	0010      	movs	r0, r2
 8004068:	f7fc f856 	bl	8000118 <__udivsi3>
 800406c:	0003      	movs	r3, r0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d90a      	bls.n	800408c <UART_SetConfig+0x458>
 8004076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	025b      	lsls	r3, r3, #9
 800407c:	429a      	cmp	r2, r3
 800407e:	d205      	bcs.n	800408c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	b29a      	uxth	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e005      	b.n	8004098 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800408c:	231a      	movs	r3, #26
 800408e:	2218      	movs	r2, #24
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2200      	movs	r2, #0
 800409c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2200      	movs	r2, #0
 80040a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040a4:	231a      	movs	r3, #26
 80040a6:	2218      	movs	r2, #24
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	19db      	adds	r3, r3, r7
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b00e      	add	sp, #56	; 0x38
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	08004688 	.word	0x08004688
 80040bc:	40021000 	.word	0x40021000
 80040c0:	003d0900 	.word	0x003d0900
 80040c4:	00f42400 	.word	0x00f42400

080040c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <UART_AdvFeatureConfig+0x144>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00b      	beq.n	8004114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a43      	ldr	r2, [pc, #268]	; (8004210 <UART_AdvFeatureConfig+0x148>)
 8004104:	4013      	ands	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d00b      	beq.n	8004136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a3b      	ldr	r2, [pc, #236]	; (8004214 <UART_AdvFeatureConfig+0x14c>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <UART_AdvFeatureConfig+0x150>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d00b      	beq.n	800417a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <UART_AdvFeatureConfig+0x154>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d00b      	beq.n	800419c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <UART_AdvFeatureConfig+0x158>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	4013      	ands	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <UART_AdvFeatureConfig+0x15c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	035b      	lsls	r3, r3, #13
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10b      	bne.n	80041e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <UART_AdvFeatureConfig+0x160>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	4013      	ands	r3, r2
 80041ea:	d00b      	beq.n	8004204 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a0e      	ldr	r2, [pc, #56]	; (800422c <UART_AdvFeatureConfig+0x164>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}
 800420c:	fffdffff 	.word	0xfffdffff
 8004210:	fffeffff 	.word	0xfffeffff
 8004214:	fffbffff 	.word	0xfffbffff
 8004218:	ffff7fff 	.word	0xffff7fff
 800421c:	ffffefff 	.word	0xffffefff
 8004220:	ffffdfff 	.word	0xffffdfff
 8004224:	ffefffff 	.word	0xffefffff
 8004228:	ff9fffff 	.word	0xff9fffff
 800422c:	fff7ffff 	.word	0xfff7ffff

08004230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b092      	sub	sp, #72	; 0x48
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2284      	movs	r2, #132	; 0x84
 800423c:	2100      	movs	r1, #0
 800423e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004240:	f7fc ffd6 	bl	80011f0 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2208      	movs	r2, #8
 8004250:	4013      	ands	r3, r2
 8004252:	2b08      	cmp	r3, #8
 8004254:	d12c      	bne.n	80042b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0391      	lsls	r1, r2, #14
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4a46      	ldr	r2, [pc, #280]	; (8004378 <UART_CheckIdleState+0x148>)
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	f000 f88c 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d021      	beq.n	80042b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426c:	f3ef 8310 	mrs	r3, PRIMASK
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
 8004276:	2301      	movs	r3, #1
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	f383 8810 	msr	PRIMASK, r3
}
 800429c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2278      	movs	r2, #120	; 0x78
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e05f      	b.n	8004370 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d146      	bne.n	800434c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c0:	2280      	movs	r2, #128	; 0x80
 80042c2:	03d1      	lsls	r1, r2, #15
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <UART_CheckIdleState+0x148>)
 80042c8:	9200      	str	r2, [sp, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f000 f858 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80042d0:	1e03      	subs	r3, r0, #0
 80042d2:	d03b      	beq.n	800434c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80042da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	2301      	movs	r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4921      	ldr	r1, [pc, #132]	; (800437c <UART_CheckIdleState+0x14c>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004306:	f3ef 8310 	mrs	r3, PRIMASK
 800430a:	61bb      	str	r3, [r7, #24]
  return(result);
 800430c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
 8004310:	2301      	movs	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f383 8810 	msr	PRIMASK, r3
}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	2120      	movs	r1, #32
 800433e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2278      	movs	r2, #120	; 0x78
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e011      	b.n	8004370 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	2120      	movs	r1, #32
 8004358:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2278      	movs	r2, #120	; 0x78
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b010      	add	sp, #64	; 0x40
 8004376:	bd80      	pop	{r7, pc}
 8004378:	01ffffff 	.word	0x01ffffff
 800437c:	fffffedf 	.word	0xfffffedf

08004380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	e04b      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3301      	adds	r3, #1
 8004396:	d048      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004398:	f7fc ff2a 	bl	80011f0 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d302      	bcc.n	80043ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e04b      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	4013      	ands	r3, r2
 80043bc:	d035      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2208      	movs	r2, #8
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d111      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 f83c 	bl	8004454 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2284      	movs	r2, #132	; 0x84
 80043e0:	2108      	movs	r1, #8
 80043e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2278      	movs	r2, #120	; 0x78
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e02c      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	401a      	ands	r2, r3
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	429a      	cmp	r2, r3
 8004402:	d112      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f81f 	bl	8004454 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2284      	movs	r2, #132	; 0x84
 800441a:	2120      	movs	r1, #32
 800441c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2278      	movs	r2, #120	; 0x78
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00f      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	4013      	ands	r3, r2
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	425a      	negs	r2, r3
 800443a:	4153      	adcs	r3, r2
 800443c:	b2db      	uxtb	r3, r3
 800443e:	001a      	movs	r2, r3
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d0a4      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445c:	f3ef 8310 	mrs	r3, PRIMASK
 8004460:	617b      	str	r3, [r7, #20]
  return(result);
 8004462:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f383 8810 	msr	PRIMASK, r3
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4926      	ldr	r1, [pc, #152]	; (8004518 <UART_EndRxTransfer+0xc4>)
 800447e:	400a      	ands	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448e:	f3ef 8310 	mrs	r3, PRIMASK
 8004492:	623b      	str	r3, [r7, #32]
  return(result);
 8004494:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	2301      	movs	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	f383 8810 	msr	PRIMASK, r3
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	438a      	bics	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f383 8810 	msr	PRIMASK, r3
}
 80044be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d118      	bne.n	80044fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c8:	f3ef 8310 	mrs	r3, PRIMASK
 80044cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d2:	2301      	movs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2110      	movs	r1, #16
 80044ea:	438a      	bics	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	2120      	movs	r1, #32
 8004500:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b00e      	add	sp, #56	; 0x38
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	fffffedf 	.word	0xfffffedf

0800451c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	225a      	movs	r2, #90	; 0x5a
 800452e:	2100      	movs	r1, #0
 8004530:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2252      	movs	r2, #82	; 0x52
 8004536:	2100      	movs	r1, #0
 8004538:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fb65 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b004      	add	sp, #16
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004552:	f3ef 8310 	mrs	r3, PRIMASK
 8004556:	60bb      	str	r3, [r7, #8]
  return(result);
 8004558:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	2301      	movs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f383 8810 	msr	PRIMASK, r3
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2140      	movs	r1, #64	; 0x40
 8004574:	438a      	bics	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f7ff fb32 	bl	8003bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b006      	add	sp, #24
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <memset>:
 80045b0:	0003      	movs	r3, r0
 80045b2:	1882      	adds	r2, r0, r2
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	7019      	strb	r1, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	2600      	movs	r6, #0
 80045c4:	4c0c      	ldr	r4, [pc, #48]	; (80045f8 <__libc_init_array+0x38>)
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	42a6      	cmp	r6, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	2600      	movs	r6, #0
 80045d2:	f000 f819 	bl	8004608 <_init>
 80045d6:	4c0a      	ldr	r4, [pc, #40]	; (8004600 <__libc_init_array+0x40>)
 80045d8:	4d0a      	ldr	r5, [pc, #40]	; (8004604 <__libc_init_array+0x44>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	42a6      	cmp	r6, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	00b3      	lsls	r3, r6, #2
 80045e6:	58eb      	ldr	r3, [r5, r3]
 80045e8:	4798      	blx	r3
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	00b3      	lsls	r3, r6, #2
 80045f0:	58eb      	ldr	r3, [r5, r3]
 80045f2:	4798      	blx	r3
 80045f4:	3601      	adds	r6, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	080046b4 	.word	0x080046b4
 80045fc:	080046b4 	.word	0x080046b4
 8004600:	080046b8 	.word	0x080046b8
 8004604:	080046b4 	.word	0x080046b4

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
